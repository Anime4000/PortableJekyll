var search_data = {"index":{"searchIndex":["rouge","cli","error","help","highlight","style","list","version","csstheme","filereader","formatter","formatters","html","htmlinline","htmllinewise","null","terminal256","escapesequence","hasmodes","indentation","inheritablehash","inheritablelist","lexer","ambiguousguess","lexers","apache","literal","string","applescript","comment","literal","number","string","name","operator","text","c","comment","keyword","name","num","str","css","comment","name","str","csharp","comment","keyword","name","str","clojure","comment","name","num","str","text","coffeescript","comment","name","variable","num","str","commonlisp","comment","keyword","name","variable","num","str","conf","str","cpp","keyword","name","num","dart","diff","generic","erb","comment","elixir","comment","keyword","name","builtin","operator","str","erlang","name","num","operator","str","factor","keyword","name","num","str","gherkin","keyword","name","glsl","go","keyword","name","str","groovy","html","comment","name","http","name","haml","comment","name","variable","str","handlebars","keyword","name","builtin","str","haskell","comment","keyword","name","num","str","ini","name","str","io","comment","keyword","name","num","json","keyword","name","num","str","text","jsondoc","comment","java","javascript","comment","keyword","name","num","str","llvm","comment","keyword","name","variable","liquid","keyword","name","num","operator","str","text","literatecoffeescript","literatehaskell","name","lua","comment","keyword","name","num","operator","str","make","name","str","markdown","generic","name","str","matlab","comment","name","num","integer","str","moonscript","comment","keyword","literal","string","name","variable","num","operator","str","text","nginx","comment","keyword","name","num","str","nim","keyword","name","num","integer","operator","str","ocaml","keyword","name","builtin","num","operator","str","objectivec","comment","name","num","str","php","comment","keyword","name","num","str","perl","comment","operator","str","plaintext","powershell","comment","keyword","name","praat","comment","generic","literal","string","name","operator","prolog","comment","name","num","str","properties","name","str","puppet","keyword","name","operator","str","python","keyword","name","builtin","num","integer","operator","str","qml","keyword","name","r","comment","keyword","num","str","racket","comment","name","num","str","ruby","comment","keyword","name","variable","num","str","rust","comment","keyword","name","num","str","sml","comment","keyword","name","num","str","sql","comment","name","num","str","sass","comment","name","sasscommon","comment","name","builtin","num","operator","str","scala","comment","keyword","name","num","str","scheme","comment","name","num","str","scss","comment","sed","keyword","name","regex","name","str","replacement","str","str","shell","generic","name","str","slim","literal","name","str","text","smalltalk","name","builtin","str","swift","comment","keyword","name","num","str","tcl","name","str","toml","keyword","literal","name","num","str","tex","keyword","name","str","tulip","keyword","name","str","viml","name","num","str","visualbasic","comment","keyword","literal","name","num","operator","str","xml","comment","name","yaml","comment","keyword","name","punctuation","str","plugins","redcarpet","regexlexer","rule","state","statedsl","templatelexer","textanalyzer","theme","style","themes","base16","comment","generic","keyword","literal","string","monokai","name","solarized","colorful","comment","generic","keyword","literal","number","string","name","variable","operator","github","comment","generic","keyword","literal","number","integer","string","name","builtin","variable","operator","text","molokai","comment","generic","keyword","literal","number","integer","string","name","builtin","variable","operator","text","monokai","comment","generic","keyword","literal","number","integer","string","name","builtin","variable","operator","text","monokaisublime","comment","generic","keyword","literal","number","integer","string","name","builtin","variable","operator","text","thankfuleyes","comment","generic","keyword","literal","string","name","builtin","text","token","tokens","<<()","[]()","[]()","aliases()","all()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","analyze_text()","append()","appended()","assert_utf8!()","at_builtins()","at_keywords()","attributes()","base_style()","best_by_source()","bg()","block_code()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins()","builtins_pseudo()","cache()","class_from_arg()","classes()","closest_color()","coffee()","color_index()","commands()","constants()","constants()","constants()","constants()","constants()","constants()","content_lexer()","continue_indent()","controls()","css_selector()","dark!()","debug()","declarations()","declarations()","declarations()","dedent?()","default_options()","delegate()","demo()","demo_file()","desc()","desc()","desc()","desc()","desc()","desc()","doc()","doc()","doc()","doc()","doc()","doctype()","doctype?()","each()","each()","each_token()","error!()","error!()","escape()","escape_sequence()","exceptions()","fg()","file()","filenames()","filter_by_filename()","filter_by_mimetype()","filters()","filters()","find()","find()","find()","find_fancy()","find_likely_mapping()","format()","format()","gen_command_state()","gen_delimiter_states()","get_mode()","get_own_style()","get_rgb()","get_state()","get_state()","get_style()","get_style()","goto()","group()","groups()","guess()","guess_by_filename()","guess_by_mimetype()","guess_by_source()","guesses()","handler_params()","haskell()","highlight()","html()","html()","html()","in_state?()","include?()","indent()","indent?()","indentation()","inflate_token()","input()","input_stream()","inspect()","inspect()","inspect()","keyopts()","keys()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords()","keywords_type()","keywords_type()","keywords_type()","lex()","lex()","lexer()","lexer_class()","lexes_cleanly?()","light!()","literals()","load!()","load_lexer()","macro_closed?()","make_dark!()","make_light!()","make_token()","mapping_contains?()","markdown()","matches?()","message()","metaparameters()","methods()","mimetypes()","mixin()","mode()","mode!()","name()","name_for_token()","name_token()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_line_class()","normalize_syntax()","operator_words()","operators()","option()","options()","own_entries()","own_keys()","palette()","parent()","parent()","parent()","parse()","parse()","parse()","parse()","parse()","parse()","parse_cgi()","pop!()","prepend()","prepended()","primitives()","push()","push()","qualname()","read()","recurse()","references()","regex()","register()","register!()","registry()","registry()","render()","render()","render()","render()","render_base()","rendered_rules()","replace_state()","replacement()","reserved()","reserved()","reserved()","reserved()","reserved()","reset!()","reset!()","reset!()","reset_indent()","reset_stack()","reset_string()","rouge_formatter()","ruby()","ruby()","rule()","run()","run()","run()","run()","run()","safe_span()","save_indent()","set_indent()","shebang()","shebang?()","single_css_selector()","span()","stack()","start()","start_inline?()","start_procs()","starts_block()","state()","state()","state?()","state_definitions()","states()","step()","step_regex()","stream()","stream()","stream()","stream()","stream()","stream_tableized()","stream_tokens()","stream_tokens()","stream_tokens()","stream_untableized()","studio_classes()","studio_commands()","studio_events()","studio_properties()","style()","style_for()","style_string()","styles()","styles()","sub_tokens()","symbolic_reserved()","tag()","tag()","tag()","text_style()","title()","to_state()","token()","token()","token()","token()","token_chain()","token_for_final_id()","token_for_id()","token_for_id_with_dot()","types()","underscorize()","vendor_prefixes()","version()","word_operators()","xterm_colors()","yield_token()","apache","applescript","c","clojure","coffeescript","common_lisp","conf","cpp","csharp","css","dart","diff","elixir","erb","erlang","factor","gherkin","glsl","go","groovy","haml","handlebars","haskell","html","http","ini","io","java","javascript","json","json-doc","liquid","literate_coffeescript","literate_haskell","llvm","lua","make","markdown","matlab","moonscript","nginx","nim","objective_c","ocaml","perl","php","plaintext","powershell","praat","prolog","properties","puppet","python","qml","r","racket","ruby","rust","sass","scala","scheme","scss","sed","shell","slim","smalltalk","sml","sql","swift","tcl","tex","toml","tulip","vb","viml","xml","yaml"],"longSearchIndex":["rouge","rouge::cli","rouge::cli::error","rouge::cli::help","rouge::cli::help::highlight","rouge::cli::help::highlight::style","rouge::cli::help::highlight::style::list","rouge::cli::version","rouge::csstheme","rouge::filereader","rouge::formatter","rouge::formatters","rouge::formatters::html","rouge::formatters::htmlinline","rouge::formatters::htmllinewise","rouge::formatters::null","rouge::formatters::terminal256","rouge::formatters::terminal256::escapesequence","rouge::hasmodes","rouge::indentation","rouge::inheritablehash","rouge::inheritablelist","rouge::lexer","rouge::lexer::ambiguousguess","rouge::lexers","rouge::lexers::apache","rouge::lexers::apache::literal","rouge::lexers::apache::literal::string","rouge::lexers::applescript","rouge::lexers::applescript::comment","rouge::lexers::applescript::literal","rouge::lexers::applescript::literal::number","rouge::lexers::applescript::literal::string","rouge::lexers::applescript::name","rouge::lexers::applescript::operator","rouge::lexers::applescript::text","rouge::lexers::c","rouge::lexers::c::comment","rouge::lexers::c::keyword","rouge::lexers::c::name","rouge::lexers::c::num","rouge::lexers::c::str","rouge::lexers::css","rouge::lexers::css::comment","rouge::lexers::css::name","rouge::lexers::css::str","rouge::lexers::csharp","rouge::lexers::csharp::comment","rouge::lexers::csharp::keyword","rouge::lexers::csharp::name","rouge::lexers::csharp::str","rouge::lexers::clojure","rouge::lexers::clojure::comment","rouge::lexers::clojure::name","rouge::lexers::clojure::num","rouge::lexers::clojure::str","rouge::lexers::clojure::text","rouge::lexers::coffeescript","rouge::lexers::coffeescript::comment","rouge::lexers::coffeescript::name","rouge::lexers::coffeescript::name::variable","rouge::lexers::coffeescript::num","rouge::lexers::coffeescript::str","rouge::lexers::commonlisp","rouge::lexers::commonlisp::comment","rouge::lexers::commonlisp::keyword","rouge::lexers::commonlisp::name","rouge::lexers::commonlisp::name::variable","rouge::lexers::commonlisp::num","rouge::lexers::commonlisp::str","rouge::lexers::conf","rouge::lexers::conf::str","rouge::lexers::cpp","rouge::lexers::cpp::keyword","rouge::lexers::cpp::name","rouge::lexers::cpp::num","rouge::lexers::dart","rouge::lexers::diff","rouge::lexers::diff::generic","rouge::lexers::erb","rouge::lexers::erb::comment","rouge::lexers::elixir","rouge::lexers::elixir::comment","rouge::lexers::elixir::keyword","rouge::lexers::elixir::name","rouge::lexers::elixir::name::builtin","rouge::lexers::elixir::operator","rouge::lexers::elixir::str","rouge::lexers::erlang","rouge::lexers::erlang::name","rouge::lexers::erlang::num","rouge::lexers::erlang::operator","rouge::lexers::erlang::str","rouge::lexers::factor","rouge::lexers::factor::keyword","rouge::lexers::factor::name","rouge::lexers::factor::num","rouge::lexers::factor::str","rouge::lexers::gherkin","rouge::lexers::gherkin::keyword","rouge::lexers::gherkin::name","rouge::lexers::glsl","rouge::lexers::go","rouge::lexers::go::keyword","rouge::lexers::go::name","rouge::lexers::go::str","rouge::lexers::groovy","rouge::lexers::html","rouge::lexers::html::comment","rouge::lexers::html::name","rouge::lexers::http","rouge::lexers::http::name","rouge::lexers::haml","rouge::lexers::haml::comment","rouge::lexers::haml::name","rouge::lexers::haml::name::variable","rouge::lexers::haml::str","rouge::lexers::handlebars","rouge::lexers::handlebars::keyword","rouge::lexers::handlebars::name","rouge::lexers::handlebars::name::builtin","rouge::lexers::handlebars::str","rouge::lexers::haskell","rouge::lexers::haskell::comment","rouge::lexers::haskell::keyword","rouge::lexers::haskell::name","rouge::lexers::haskell::num","rouge::lexers::haskell::str","rouge::lexers::ini","rouge::lexers::ini::name","rouge::lexers::ini::str","rouge::lexers::io","rouge::lexers::io::comment","rouge::lexers::io::keyword","rouge::lexers::io::name","rouge::lexers::io::num","rouge::lexers::json","rouge::lexers::json::keyword","rouge::lexers::json::name","rouge::lexers::json::num","rouge::lexers::json::str","rouge::lexers::json::text","rouge::lexers::jsondoc","rouge::lexers::jsondoc::comment","rouge::lexers::java","rouge::lexers::javascript","rouge::lexers::javascript::comment","rouge::lexers::javascript::keyword","rouge::lexers::javascript::name","rouge::lexers::javascript::num","rouge::lexers::javascript::str","rouge::lexers::llvm","rouge::lexers::llvm::comment","rouge::lexers::llvm::keyword","rouge::lexers::llvm::name","rouge::lexers::llvm::name::variable","rouge::lexers::liquid","rouge::lexers::liquid::keyword","rouge::lexers::liquid::name","rouge::lexers::liquid::num","rouge::lexers::liquid::operator","rouge::lexers::liquid::str","rouge::lexers::liquid::text","rouge::lexers::literatecoffeescript","rouge::lexers::literatehaskell","rouge::lexers::literatehaskell::name","rouge::lexers::lua","rouge::lexers::lua::comment","rouge::lexers::lua::keyword","rouge::lexers::lua::name","rouge::lexers::lua::num","rouge::lexers::lua::operator","rouge::lexers::lua::str","rouge::lexers::make","rouge::lexers::make::name","rouge::lexers::make::str","rouge::lexers::markdown","rouge::lexers::markdown::generic","rouge::lexers::markdown::name","rouge::lexers::markdown::str","rouge::lexers::matlab","rouge::lexers::matlab::comment","rouge::lexers::matlab::name","rouge::lexers::matlab::num","rouge::lexers::matlab::num::integer","rouge::lexers::matlab::str","rouge::lexers::moonscript","rouge::lexers::moonscript::comment","rouge::lexers::moonscript::keyword","rouge::lexers::moonscript::literal","rouge::lexers::moonscript::literal::string","rouge::lexers::moonscript::name","rouge::lexers::moonscript::name::variable","rouge::lexers::moonscript::num","rouge::lexers::moonscript::operator","rouge::lexers::moonscript::str","rouge::lexers::moonscript::text","rouge::lexers::nginx","rouge::lexers::nginx::comment","rouge::lexers::nginx::keyword","rouge::lexers::nginx::name","rouge::lexers::nginx::num","rouge::lexers::nginx::str","rouge::lexers::nim","rouge::lexers::nim::keyword","rouge::lexers::nim::name","rouge::lexers::nim::num","rouge::lexers::nim::num::integer","rouge::lexers::nim::operator","rouge::lexers::nim::str","rouge::lexers::ocaml","rouge::lexers::ocaml::keyword","rouge::lexers::ocaml::name","rouge::lexers::ocaml::name::builtin","rouge::lexers::ocaml::num","rouge::lexers::ocaml::operator","rouge::lexers::ocaml::str","rouge::lexers::objectivec","rouge::lexers::objectivec::comment","rouge::lexers::objectivec::name","rouge::lexers::objectivec::num","rouge::lexers::objectivec::str","rouge::lexers::php","rouge::lexers::php::comment","rouge::lexers::php::keyword","rouge::lexers::php::name","rouge::lexers::php::num","rouge::lexers::php::str","rouge::lexers::perl","rouge::lexers::perl::comment","rouge::lexers::perl::operator","rouge::lexers::perl::str","rouge::lexers::plaintext","rouge::lexers::powershell","rouge::lexers::powershell::comment","rouge::lexers::powershell::keyword","rouge::lexers::powershell::name","rouge::lexers::praat","rouge::lexers::praat::comment","rouge::lexers::praat::generic","rouge::lexers::praat::literal","rouge::lexers::praat::literal::string","rouge::lexers::praat::name","rouge::lexers::praat::operator","rouge::lexers::prolog","rouge::lexers::prolog::comment","rouge::lexers::prolog::name","rouge::lexers::prolog::num","rouge::lexers::prolog::str","rouge::lexers::properties","rouge::lexers::properties::name","rouge::lexers::properties::str","rouge::lexers::puppet","rouge::lexers::puppet::keyword","rouge::lexers::puppet::name","rouge::lexers::puppet::operator","rouge::lexers::puppet::str","rouge::lexers::python","rouge::lexers::python::keyword","rouge::lexers::python::name","rouge::lexers::python::name::builtin","rouge::lexers::python::num","rouge::lexers::python::num::integer","rouge::lexers::python::operator","rouge::lexers::python::str","rouge::lexers::qml","rouge::lexers::qml::keyword","rouge::lexers::qml::name","rouge::lexers::r","rouge::lexers::r::comment","rouge::lexers::r::keyword","rouge::lexers::r::num","rouge::lexers::r::str","rouge::lexers::racket","rouge::lexers::racket::comment","rouge::lexers::racket::name","rouge::lexers::racket::num","rouge::lexers::racket::str","rouge::lexers::ruby","rouge::lexers::ruby::comment","rouge::lexers::ruby::keyword","rouge::lexers::ruby::name","rouge::lexers::ruby::name::variable","rouge::lexers::ruby::num","rouge::lexers::ruby::str","rouge::lexers::rust","rouge::lexers::rust::comment","rouge::lexers::rust::keyword","rouge::lexers::rust::name","rouge::lexers::rust::num","rouge::lexers::rust::str","rouge::lexers::sml","rouge::lexers::sml::comment","rouge::lexers::sml::keyword","rouge::lexers::sml::name","rouge::lexers::sml::num","rouge::lexers::sml::str","rouge::lexers::sql","rouge::lexers::sql::comment","rouge::lexers::sql::name","rouge::lexers::sql::num","rouge::lexers::sql::str","rouge::lexers::sass","rouge::lexers::sass::comment","rouge::lexers::sass::name","rouge::lexers::sasscommon","rouge::lexers::sasscommon::comment","rouge::lexers::sasscommon::name","rouge::lexers::sasscommon::name::builtin","rouge::lexers::sasscommon::num","rouge::lexers::sasscommon::operator","rouge::lexers::sasscommon::str","rouge::lexers::scala","rouge::lexers::scala::comment","rouge::lexers::scala::keyword","rouge::lexers::scala::name","rouge::lexers::scala::num","rouge::lexers::scala::str","rouge::lexers::scheme","rouge::lexers::scheme::comment","rouge::lexers::scheme::name","rouge::lexers::scheme::num","rouge::lexers::scheme::str","rouge::lexers::scss","rouge::lexers::scss::comment","rouge::lexers::sed","rouge::lexers::sed::keyword","rouge::lexers::sed::name","rouge::lexers::sed::regex","rouge::lexers::sed::regex::name","rouge::lexers::sed::regex::str","rouge::lexers::sed::replacement","rouge::lexers::sed::replacement::str","rouge::lexers::sed::str","rouge::lexers::shell","rouge::lexers::shell::generic","rouge::lexers::shell::name","rouge::lexers::shell::str","rouge::lexers::slim","rouge::lexers::slim::literal","rouge::lexers::slim::name","rouge::lexers::slim::str","rouge::lexers::slim::text","rouge::lexers::smalltalk","rouge::lexers::smalltalk::name","rouge::lexers::smalltalk::name::builtin","rouge::lexers::smalltalk::str","rouge::lexers::swift","rouge::lexers::swift::comment","rouge::lexers::swift::keyword","rouge::lexers::swift::name","rouge::lexers::swift::num","rouge::lexers::swift::str","rouge::lexers::tcl","rouge::lexers::tcl::name","rouge::lexers::tcl::str","rouge::lexers::toml","rouge::lexers::toml::keyword","rouge::lexers::toml::literal","rouge::lexers::toml::name","rouge::lexers::toml::num","rouge::lexers::toml::str","rouge::lexers::tex","rouge::lexers::tex::keyword","rouge::lexers::tex::name","rouge::lexers::tex::str","rouge::lexers::tulip","rouge::lexers::tulip::keyword","rouge::lexers::tulip::name","rouge::lexers::tulip::str","rouge::lexers::viml","rouge::lexers::viml::name","rouge::lexers::viml::num","rouge::lexers::viml::str","rouge::lexers::visualbasic","rouge::lexers::visualbasic::comment","rouge::lexers::visualbasic::keyword","rouge::lexers::visualbasic::literal","rouge::lexers::visualbasic::name","rouge::lexers::visualbasic::num","rouge::lexers::visualbasic::operator","rouge::lexers::visualbasic::str","rouge::lexers::xml","rouge::lexers::xml::comment","rouge::lexers::xml::name","rouge::lexers::yaml","rouge::lexers::yaml::comment","rouge::lexers::yaml::keyword","rouge::lexers::yaml::name","rouge::lexers::yaml::punctuation","rouge::lexers::yaml::str","rouge::plugins","rouge::plugins::redcarpet","rouge::regexlexer","rouge::regexlexer::rule","rouge::regexlexer::state","rouge::regexlexer::statedsl","rouge::templatelexer","rouge::textanalyzer","rouge::theme","rouge::theme::style","rouge::themes","rouge::themes::base16","rouge::themes::base16::comment","rouge::themes::base16::generic","rouge::themes::base16::keyword","rouge::themes::base16::literal","rouge::themes::base16::literal::string","rouge::themes::base16::monokai","rouge::themes::base16::name","rouge::themes::base16::solarized","rouge::themes::colorful","rouge::themes::colorful::comment","rouge::themes::colorful::generic","rouge::themes::colorful::keyword","rouge::themes::colorful::literal","rouge::themes::colorful::literal::number","rouge::themes::colorful::literal::string","rouge::themes::colorful::name","rouge::themes::colorful::name::variable","rouge::themes::colorful::operator","rouge::themes::github","rouge::themes::github::comment","rouge::themes::github::generic","rouge::themes::github::keyword","rouge::themes::github::literal","rouge::themes::github::literal::number","rouge::themes::github::literal::number::integer","rouge::themes::github::literal::string","rouge::themes::github::name","rouge::themes::github::name::builtin","rouge::themes::github::name::variable","rouge::themes::github::operator","rouge::themes::github::text","rouge::themes::molokai","rouge::themes::molokai::comment","rouge::themes::molokai::generic","rouge::themes::molokai::keyword","rouge::themes::molokai::literal","rouge::themes::molokai::literal::number","rouge::themes::molokai::literal::number::integer","rouge::themes::molokai::literal::string","rouge::themes::molokai::name","rouge::themes::molokai::name::builtin","rouge::themes::molokai::name::variable","rouge::themes::molokai::operator","rouge::themes::molokai::text","rouge::themes::monokai","rouge::themes::monokai::comment","rouge::themes::monokai::generic","rouge::themes::monokai::keyword","rouge::themes::monokai::literal","rouge::themes::monokai::literal::number","rouge::themes::monokai::literal::number::integer","rouge::themes::monokai::literal::string","rouge::themes::monokai::name","rouge::themes::monokai::name::builtin","rouge::themes::monokai::name::variable","rouge::themes::monokai::operator","rouge::themes::monokai::text","rouge::themes::monokaisublime","rouge::themes::monokaisublime::comment","rouge::themes::monokaisublime::generic","rouge::themes::monokaisublime::keyword","rouge::themes::monokaisublime::literal","rouge::themes::monokaisublime::literal::number","rouge::themes::monokaisublime::literal::number::integer","rouge::themes::monokaisublime::literal::string","rouge::themes::monokaisublime::name","rouge::themes::monokaisublime::name::builtin","rouge::themes::monokaisublime::name::variable","rouge::themes::monokaisublime::operator","rouge::themes::monokaisublime::text","rouge::themes::thankfuleyes","rouge::themes::thankfuleyes::comment","rouge::themes::thankfuleyes::generic","rouge::themes::thankfuleyes::keyword","rouge::themes::thankfuleyes::literal","rouge::themes::thankfuleyes::literal::string","rouge::themes::thankfuleyes::name","rouge::themes::thankfuleyes::name::builtin","rouge::themes::thankfuleyes::text","rouge::token","rouge::token::tokens","rouge::inheritablelist#<<()","rouge::inheritablehash#[]()","rouge::token::[]()","rouge::lexer::aliases()","rouge::lexer::all()","rouge::lexer::analyze_text()","rouge::lexers::c::analyze_text()","rouge::lexers::coffeescript::analyze_text()","rouge::lexers::diff::analyze_text()","rouge::lexers::erb::analyze_text()","rouge::lexers::erlang::analyze_text()","rouge::lexers::factor::analyze_text()","rouge::lexers::gherkin::analyze_text()","rouge::lexers::go::analyze_text()","rouge::lexers::html::analyze_text()","rouge::lexers::haml::analyze_text()","rouge::lexers::haskell::analyze_text()","rouge::lexers::ini::analyze_text()","rouge::lexers::io::analyze_text()","rouge::lexers::json::analyze_text()","rouge::lexers::javascript::analyze_text()","rouge::lexers::llvm::analyze_text()","rouge::lexers::lua::analyze_text()","rouge::lexers::make::analyze_text()","rouge::lexers::matlab::analyze_text()","rouge::lexers::moonscript::analyze_text()","rouge::lexers::objectivec::analyze_text()","rouge::lexers::php::analyze_text()","rouge::lexers::perl::analyze_text()","rouge::lexers::praat::analyze_text()","rouge::lexers::prolog::analyze_text()","rouge::lexers::properties::analyze_text()","rouge::lexers::puppet::analyze_text()","rouge::lexers::python::analyze_text()","rouge::lexers::r::analyze_text()","rouge::lexers::racket::analyze_text()","rouge::lexers::ruby::analyze_text()","rouge::lexers::rust::analyze_text()","rouge::lexers::sml::analyze_text()","rouge::lexers::sed::analyze_text()","rouge::lexers::shell::analyze_text()","rouge::lexers::tcl::analyze_text()","rouge::lexers::toml::analyze_text()","rouge::lexers::tex::analyze_text()","rouge::lexers::tulip::analyze_text()","rouge::lexers::xml::analyze_text()","rouge::lexers::yaml::analyze_text()","rouge::regexlexer::append()","rouge::regexlexer::statedsl#appended()","rouge::lexer::assert_utf8!()","rouge::lexers::objectivec::at_builtins()","rouge::lexers::objectivec::at_keywords()","rouge::lexers::css::attributes()","rouge::theme::base_style()","rouge::lexer::best_by_source()","rouge::formatters::terminal256::escapesequence#bg()","rouge::plugins::redcarpet#block_code()","rouge::lexers::applescript::builtins()","rouge::lexers::c::builtins()","rouge::lexers::css::builtins()","rouge::lexers::clojure::builtins()","rouge::lexers::coffeescript::builtins()","rouge::lexers::factor::builtins()","rouge::lexers::glsl::builtins()","rouge::lexers::io::builtins()","rouge::lexers::javascript::builtins()","rouge::lexers::lua#builtins()","rouge::lexers::lua::builtins()","rouge::lexers::matlab::builtins()","rouge::lexers::moonscript#builtins()","rouge::lexers::objectivec::builtins()","rouge::lexers::php#builtins()","rouge::lexers::php::builtins()","rouge::lexers::python::builtins()","rouge::lexers::racket::builtins()","rouge::lexers::rust::builtins()","rouge::lexers::scheme::builtins()","rouge::lexers::visualbasic::builtins()","rouge::lexers::python::builtins_pseudo()","rouge::token::cache()","rouge::cli::class_from_arg()","rouge::lexers::applescript::classes()","rouge::formatters::terminal256::escapesequence::closest_color()","rouge::lexers::literatecoffeescript#coffee()","rouge::formatters::terminal256::escapesequence::color_index()","rouge::lexers::applescript::commands()","rouge::lexers::css::constants()","rouge::lexers::coffeescript::constants()","rouge::lexers::groovy::constants()","rouge::lexers::io::constants()","rouge::lexers::javascript::constants()","rouge::lexers::puppet::constants()","rouge::lexers::http#content_lexer()","rouge::lexers::yaml#continue_indent()","rouge::lexers::applescript::controls()","rouge::csstheme#css_selector()","rouge::themes::base16::dark!()","rouge::lexer#debug()","rouge::lexers::applescript::declarations()","rouge::lexers::groovy::declarations()","rouge::lexers::javascript::declarations()","rouge::lexers::yaml#dedent?()","rouge::lexer::default_options()","rouge::regexlexer#delegate()","rouge::lexer::demo()","rouge::lexer::demo_file()","rouge::cli::help::desc()","rouge::cli::help::highlight::desc()","rouge::cli::help::highlight::style::desc()","rouge::cli::help::highlight::style::list::desc()","rouge::cli::version::desc()","rouge::lexer::desc()","rouge::cli::doc()","rouge::cli::help::doc()","rouge::cli::help::highlight::doc()","rouge::cli::help::highlight::style::doc()","rouge::cli::help::highlight::style::list::doc()","rouge::textanalyzer#doctype()","rouge::textanalyzer#doctype?()","rouge::inheritablehash#each()","rouge::inheritablelist#each()","rouge::token::each_token()","rouge::cli::error!()","rouge::cli#error!()","rouge::formatters::terminal256::escapesequence#escape()","rouge::formatters::terminal256#escape_sequence()","rouge::lexers::python::exceptions()","rouge::formatters::terminal256::escapesequence#fg()","rouge::filereader#file()","rouge::lexer::filenames()","rouge::lexer::filter_by_filename()","rouge::lexer::filter_by_mimetype()","rouge::lexers::haml#filters()","rouge::lexers::slim#filters()","rouge::formatter::find()","rouge::lexer::find()","rouge::theme::find()","rouge::lexer::find_fancy()","rouge::lexers::viml#find_likely_mapping()","rouge::formatter::format()","rouge::formatter#format()","rouge::lexers::tcl::gen_command_state()","rouge::lexers::tcl::gen_delimiter_states()","rouge::hasmodes#get_mode()","rouge::theme::get_own_style()","rouge::formatters::terminal256::escapesequence::get_rgb()","rouge::regexlexer::get_state()","rouge::regexlexer#get_state()","rouge::formatters::terminal256#get_style()","rouge::theme::get_style()","rouge::regexlexer#goto()","rouge::regexlexer#group()","rouge::regexlexer#groups()","rouge::lexer::guess()","rouge::lexer::guess_by_filename()","rouge::lexer::guess_by_mimetype()","rouge::lexer::guess_by_source()","rouge::lexer::guesses()","rouge::lexers::applescript::handler_params()","rouge::lexers::literatehaskell#haskell()","rouge::highlight()","rouge::lexers::haml#html()","rouge::lexers::markdown#html()","rouge::lexers::slim#html()","rouge::regexlexer#in_state?()","rouge::inheritablehash#include?()","rouge::lexers::yaml#indent()","rouge::lexers::yaml#indent?()","rouge::indentation#indentation()","rouge::csstheme#inflate_token()","rouge::cli::help::highlight#input()","rouge::cli::help::highlight#input_stream()","rouge::regexlexer::rule#inspect()","rouge::regexlexer::state#inspect()","rouge::token::inspect()","rouge::lexers::ocaml::keyopts()","rouge::inheritablehash#keys()","rouge::lexers::c::keywords()","rouge::lexers::clojure::keywords()","rouge::lexers::coffeescript::keywords()","rouge::lexers::cpp::keywords()","rouge::lexers::gherkin::keywords()","rouge::lexers::glsl::keywords()","rouge::lexers::groovy::keywords()","rouge::lexers::javascript::keywords()","rouge::lexers::matlab::keywords()","rouge::lexers::ocaml::keywords()","rouge::lexers::php::keywords()","rouge::lexers::puppet::keywords()","rouge::lexers::python::keywords()","rouge::lexers::r::keywords()","rouge::lexers::racket::keywords()","rouge::lexers::rust::keywords()","rouge::lexers::sml::keywords()","rouge::lexers::sql::keywords()","rouge::lexers::scheme::keywords()","rouge::lexers::viml::keywords()","rouge::lexers::visualbasic::keywords()","rouge::lexers::c::keywords_type()","rouge::lexers::glsl::keywords_type()","rouge::lexers::visualbasic::keywords_type()","rouge::lexer::lex()","rouge::lexer#lex()","rouge::cli::help::highlight#lexer()","rouge::cli::help::highlight#lexer_class()","rouge::textanalyzer#lexes_cleanly?()","rouge::themes::base16::light!()","rouge::lexers::applescript::literals()","rouge::regexlexer::statedsl#load!()","rouge::lexers::load_lexer()","rouge::lexers::rust#macro_closed?()","rouge::themes::base16::make_dark!()","rouge::themes::base16::make_light!()","rouge::token::make_token()","rouge::lexers::viml#mapping_contains?()","rouge::lexers::literatecoffeescript#markdown()","rouge::token::matches?()","rouge::lexer::ambiguousguess#message()","rouge::lexers::puppet::metaparameters()","rouge::lexers::http::methods()","rouge::lexer::mimetypes()","rouge::regexlexer::statedsl#mixin()","rouge::hasmodes#mode()","rouge::hasmodes#mode!()","rouge::theme::name()","rouge::lexers::apache#name_for_token()","rouge::lexers::clojure#name_token()","rouge::cli::new()","rouge::cli::error::new()","rouge::cli::help::new()","rouge::cli::help::highlight::new()","rouge::cli::help::highlight::style::new()","rouge::csstheme::new()","rouge::filereader::new()","rouge::formatters::html::new()","rouge::formatters::htmlinline::new()","rouge::formatters::htmllinewise::new()","rouge::formatters::null::new()","rouge::formatters::terminal256::new()","rouge::formatters::terminal256::escapesequence::new()","rouge::inheritablehash::new()","rouge::inheritablelist::new()","rouge::lexer::new()","rouge::lexer::ambiguousguess::new()","rouge::lexers::erb::new()","rouge::lexers::haml::new()","rouge::lexers::lua::new()","rouge::lexers::make::new()","rouge::lexers::moonscript::new()","rouge::lexers::php::new()","rouge::regexlexer::rule::new()","rouge::regexlexer::state::new()","rouge::regexlexer::statedsl::new()","rouge::theme::style::new()","rouge::formatters::htmllinewise#next_line_class()","rouge::cli::help::highlight::style::list::normalize_syntax()","rouge::lexers::visualbasic::operator_words()","rouge::lexers::applescript::operators()","rouge::lexer#option()","rouge::lexer#options()","rouge::inheritablelist#own_entries()","rouge::inheritablehash#own_keys()","rouge::theme::palette()","rouge::inheritablehash#parent()","rouge::inheritablelist#parent()","rouge::templatelexer#parent()","rouge::cli::parse()","rouge::cli::help::parse()","rouge::cli::help::highlight::parse()","rouge::cli::help::highlight::style::parse()","rouge::cli::help::highlight::style::list::parse()","rouge::cli::version::parse()","rouge::cli::help::highlight::parse_cgi()","rouge::regexlexer#pop!()","rouge::regexlexer::prepend()","rouge::regexlexer::statedsl#prepended()","rouge::lexers::ocaml::primitives()","rouge::inheritablelist#push()","rouge::regexlexer#push()","rouge::token::qualname()","rouge::filereader#read()","rouge::regexlexer#recurse()","rouge::lexers::applescript::references()","rouge::lexers::sed#regex()","rouge::lexer::register()","rouge::token::register!()","rouge::lexer::registry()","rouge::theme::registry()","rouge::csstheme#render()","rouge::formatter#render()","rouge::theme::render()","rouge::theme::style#render()","rouge::csstheme#render_base()","rouge::theme::style#rendered_rules()","rouge::regexlexer::replace_state()","rouge::lexers::sed#replacement()","rouge::lexers::applescript::reserved()","rouge::lexers::c::reserved()","rouge::lexers::cpp::reserved()","rouge::lexers::glsl::reserved()","rouge::lexers::javascript::reserved()","rouge::indentation#reset!()","rouge::lexer#reset!()","rouge::regexlexer#reset!()","rouge::lexers::yaml#reset_indent()","rouge::regexlexer#reset_stack()","rouge::formatters::terminal256::escapesequence#reset_string()","rouge::plugins::redcarpet#rouge_formatter()","rouge::lexers::haml#ruby()","rouge::lexers::slim#ruby()","rouge::regexlexer::statedsl#rule()","rouge::cli::help#run()","rouge::cli::help::highlight#run()","rouge::cli::help::highlight::style#run()","rouge::cli::help::highlight::style::list#run()","rouge::cli::version#run()","rouge::formatters::htmlinline#safe_span()","rouge::lexers::yaml#save_indent()","rouge::lexers::yaml#set_indent()","rouge::textanalyzer#shebang()","rouge::textanalyzer#shebang?()","rouge::csstheme#single_css_selector()","rouge::formatters::html#span()","rouge::regexlexer#stack()","rouge::regexlexer::start()","rouge::lexers::php#start_inline?()","rouge::regexlexer::start_procs()","rouge::indentation#starts_block()","rouge::regexlexer#state()","rouge::regexlexer::state()","rouge::regexlexer#state?()","rouge::regexlexer::state_definitions()","rouge::regexlexer::states()","rouge::regexlexer#step()","rouge::lexers::gherkin::step_regex()","rouge::formatter#stream()","rouge::formatters::html#stream()","rouge::formatters::htmllinewise#stream()","rouge::formatters::null#stream()","rouge::formatters::terminal256#stream()","rouge::formatters::html#stream_tableized()","rouge::lexer#stream_tokens()","rouge::lexers::plaintext#stream_tokens()","rouge::regexlexer#stream_tokens()","rouge::formatters::html#stream_untableized()","rouge::lexers::applescript::studio_classes()","rouge::lexers::applescript::studio_commands()","rouge::lexers::applescript::studio_events()","rouge::lexers::applescript::studio_properties()","rouge::theme::style()","rouge::csstheme#style_for()","rouge::formatters::terminal256::escapesequence#style_string()","rouge::theme#styles()","rouge::theme::styles()","rouge::token::sub_tokens()","rouge::lexers::sml::symbolic_reserved()","rouge::formatter::tag()","rouge::lexer#tag()","rouge::lexer::tag()","rouge::formatters::terminal256#text_style()","rouge::lexer::title()","rouge::regexlexer::statedsl#to_state()","rouge::lexers::plaintext#token()","rouge::regexlexer#token()","rouge::token::token()","rouge::token::tokens::token()","rouge::token::token_chain()","rouge::lexers::sml#token_for_final_id()","rouge::lexers::sml#token_for_id()","rouge::lexers::sml#token_for_id_with_dot()","rouge::lexers::groovy::types()","rouge::lexers::nim::underscorize()","rouge::lexers::css::vendor_prefixes()","rouge::version()","rouge::lexers::ocaml::word_operators()","rouge::formatters::terminal256::escapesequence::xterm_colors()","rouge::regexlexer#yield_token()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["Rouge","","Rouge.html","","<p>The containing module for Rouge\n<p>not required by the main lib. to use this module, require\n&#39;rouge/cli&#39;. …\n"],["Rouge::CLI","","Rouge/CLI.html","",""],["Rouge::CLI::Error","","Rouge/CLI/Error.html","",""],["Rouge::CLI::Help","","Rouge/CLI/Help.html","",""],["Rouge::CLI::Help::Highlight","","Rouge/CLI/Help/Highlight.html","",""],["Rouge::CLI::Help::Highlight::Style","","Rouge/CLI/Help/Highlight/Style.html","",""],["Rouge::CLI::Help::Highlight::Style::List","","Rouge/CLI/Help/Highlight/Style/List.html","",""],["Rouge::CLI::Version","","Rouge/CLI/Version.html","",""],["Rouge::CSSTheme","","Rouge/CSSTheme.html","",""],["Rouge::FileReader","","Rouge/FileReader.html","",""],["Rouge::Formatter","","Rouge/Formatter.html","","<p>A Formatter takes a token stream and formats it for human viewing.\n"],["Rouge::Formatters","","Rouge/Formatters.html","",""],["Rouge::Formatters::HTML","","Rouge/Formatters/HTML.html","","<p>Transforms a token stream into HTML output.\n"],["Rouge::Formatters::HTMLInline","","Rouge/Formatters/HTMLInline.html","",""],["Rouge::Formatters::HTMLLinewise","","Rouge/Formatters/HTMLLinewise.html","",""],["Rouge::Formatters::Null","","Rouge/Formatters/Null.html","","<p>A formatter which renders nothing.\n"],["Rouge::Formatters::Terminal256","","Rouge/Formatters/Terminal256.html","","<p>A formatter for 256-color terminals\n"],["Rouge::Formatters::Terminal256::EscapeSequence","","Rouge/Formatters/Terminal256/EscapeSequence.html","",""],["Rouge::HasModes","","Rouge/HasModes.html","",""],["Rouge::Indentation","","Rouge/Indentation.html","","<p>shared methods for some indentation-sensitive lexers\n"],["Rouge::InheritableHash","","Rouge/InheritableHash.html","",""],["Rouge::InheritableList","","Rouge/InheritableList.html","",""],["Rouge::Lexer","","Rouge/Lexer.html","","<p>@abstract A lexer transforms text into a stream of `[token, chunk]` pairs.\n"],["Rouge::Lexer::AmbiguousGuess","","Rouge/Lexer/AmbiguousGuess.html","",""],["Rouge::Lexers","","Rouge/Lexers.html","",""],["Rouge::Lexers::Apache","","Rouge/Lexers/Apache.html","",""],["Rouge::Lexers::Apache::Literal","","Rouge/Lexers/Apache/Literal.html","",""],["Rouge::Lexers::Apache::Literal::String","","Rouge/Lexers/Apache/Literal/String.html","",""],["Rouge::Lexers::AppleScript","","Rouge/Lexers/AppleScript.html","",""],["Rouge::Lexers::AppleScript::Comment","","Rouge/Lexers/AppleScript/Comment.html","",""],["Rouge::Lexers::AppleScript::Literal","","Rouge/Lexers/AppleScript/Literal.html","",""],["Rouge::Lexers::AppleScript::Literal::Number","","Rouge/Lexers/AppleScript/Literal/Number.html","",""],["Rouge::Lexers::AppleScript::Literal::String","","Rouge/Lexers/AppleScript/Literal/String.html","",""],["Rouge::Lexers::AppleScript::Name","","Rouge/Lexers/AppleScript/Name.html","",""],["Rouge::Lexers::AppleScript::Operator","","Rouge/Lexers/AppleScript/Operator.html","",""],["Rouge::Lexers::AppleScript::Text","","Rouge/Lexers/AppleScript/Text.html","",""],["Rouge::Lexers::C","","Rouge/Lexers/C.html","",""],["Rouge::Lexers::C::Comment","","Rouge/Lexers/C/Comment.html","",""],["Rouge::Lexers::C::Keyword","","Rouge/Lexers/C/Keyword.html","",""],["Rouge::Lexers::C::Name","","Rouge/Lexers/C/Name.html","",""],["Rouge::Lexers::C::Num","","Rouge/Lexers/C/Num.html","",""],["Rouge::Lexers::C::Str","","Rouge/Lexers/C/Str.html","",""],["Rouge::Lexers::CSS","","Rouge/Lexers/CSS.html","",""],["Rouge::Lexers::CSS::Comment","","Rouge/Lexers/CSS/Comment.html","",""],["Rouge::Lexers::CSS::Name","","Rouge/Lexers/CSS/Name.html","",""],["Rouge::Lexers::CSS::Str","","Rouge/Lexers/CSS/Str.html","",""],["Rouge::Lexers::CSharp","","Rouge/Lexers/CSharp.html","",""],["Rouge::Lexers::CSharp::Comment","","Rouge/Lexers/CSharp/Comment.html","",""],["Rouge::Lexers::CSharp::Keyword","","Rouge/Lexers/CSharp/Keyword.html","",""],["Rouge::Lexers::CSharp::Name","","Rouge/Lexers/CSharp/Name.html","",""],["Rouge::Lexers::CSharp::Str","","Rouge/Lexers/CSharp/Str.html","",""],["Rouge::Lexers::Clojure","","Rouge/Lexers/Clojure.html","",""],["Rouge::Lexers::Clojure::Comment","","Rouge/Lexers/Clojure/Comment.html","",""],["Rouge::Lexers::Clojure::Name","","Rouge/Lexers/Clojure/Name.html","",""],["Rouge::Lexers::Clojure::Num","","Rouge/Lexers/Clojure/Num.html","",""],["Rouge::Lexers::Clojure::Str","","Rouge/Lexers/Clojure/Str.html","",""],["Rouge::Lexers::Clojure::Text","","Rouge/Lexers/Clojure/Text.html","",""],["Rouge::Lexers::Coffeescript","","Rouge/Lexers/Coffeescript.html","",""],["Rouge::Lexers::Coffeescript::Comment","","Rouge/Lexers/Coffeescript/Comment.html","",""],["Rouge::Lexers::Coffeescript::Name","","Rouge/Lexers/Coffeescript/Name.html","",""],["Rouge::Lexers::Coffeescript::Name::Variable","","Rouge/Lexers/Coffeescript/Name/Variable.html","",""],["Rouge::Lexers::Coffeescript::Num","","Rouge/Lexers/Coffeescript/Num.html","",""],["Rouge::Lexers::Coffeescript::Str","","Rouge/Lexers/Coffeescript/Str.html","",""],["Rouge::Lexers::CommonLisp","","Rouge/Lexers/CommonLisp.html","",""],["Rouge::Lexers::CommonLisp::Comment","","Rouge/Lexers/CommonLisp/Comment.html","",""],["Rouge::Lexers::CommonLisp::Keyword","","Rouge/Lexers/CommonLisp/Keyword.html","",""],["Rouge::Lexers::CommonLisp::Name","","Rouge/Lexers/CommonLisp/Name.html","",""],["Rouge::Lexers::CommonLisp::Name::Variable","","Rouge/Lexers/CommonLisp/Name/Variable.html","",""],["Rouge::Lexers::CommonLisp::Num","","Rouge/Lexers/CommonLisp/Num.html","",""],["Rouge::Lexers::CommonLisp::Str","","Rouge/Lexers/CommonLisp/Str.html","",""],["Rouge::Lexers::Conf","","Rouge/Lexers/Conf.html","",""],["Rouge::Lexers::Conf::Str","","Rouge/Lexers/Conf/Str.html","",""],["Rouge::Lexers::Cpp","","Rouge/Lexers/Cpp.html","",""],["Rouge::Lexers::Cpp::Keyword","","Rouge/Lexers/Cpp/Keyword.html","",""],["Rouge::Lexers::Cpp::Name","","Rouge/Lexers/Cpp/Name.html","",""],["Rouge::Lexers::Cpp::Num","","Rouge/Lexers/Cpp/Num.html","",""],["Rouge::Lexers::Dart","","Rouge/Lexers/Dart.html","",""],["Rouge::Lexers::Diff","","Rouge/Lexers/Diff.html","",""],["Rouge::Lexers::Diff::Generic","","Rouge/Lexers/Diff/Generic.html","",""],["Rouge::Lexers::ERB","","Rouge/Lexers/ERB.html","",""],["Rouge::Lexers::ERB::Comment","","Rouge/Lexers/ERB/Comment.html","",""],["Rouge::Lexers::Elixir","","Rouge/Lexers/Elixir.html","","<p>Direct port of pygments Lexer. See:\nbitbucket.org/birkenfeld/pygments-main/src/7304e4759ae65343d89a51359ca538912519cc31/pygments/lexers/functional.py?at=default#cl-2362\n…\n"],["Rouge::Lexers::Elixir::Comment","","Rouge/Lexers/Elixir/Comment.html","",""],["Rouge::Lexers::Elixir::Keyword","","Rouge/Lexers/Elixir/Keyword.html","",""],["Rouge::Lexers::Elixir::Name","","Rouge/Lexers/Elixir/Name.html","",""],["Rouge::Lexers::Elixir::Name::Builtin","","Rouge/Lexers/Elixir/Name/Builtin.html","",""],["Rouge::Lexers::Elixir::Operator","","Rouge/Lexers/Elixir/Operator.html","",""],["Rouge::Lexers::Elixir::Str","","Rouge/Lexers/Elixir/Str.html","",""],["Rouge::Lexers::Erlang","","Rouge/Lexers/Erlang.html","",""],["Rouge::Lexers::Erlang::Name","","Rouge/Lexers/Erlang/Name.html","",""],["Rouge::Lexers::Erlang::Num","","Rouge/Lexers/Erlang/Num.html","",""],["Rouge::Lexers::Erlang::Operator","","Rouge/Lexers/Erlang/Operator.html","",""],["Rouge::Lexers::Erlang::Str","","Rouge/Lexers/Erlang/Str.html","",""],["Rouge::Lexers::Factor","","Rouge/Lexers/Factor.html","",""],["Rouge::Lexers::Factor::Keyword","","Rouge/Lexers/Factor/Keyword.html","",""],["Rouge::Lexers::Factor::Name","","Rouge/Lexers/Factor/Name.html","",""],["Rouge::Lexers::Factor::Num","","Rouge/Lexers/Factor/Num.html","",""],["Rouge::Lexers::Factor::Str","","Rouge/Lexers/Factor/Str.html","",""],["Rouge::Lexers::Gherkin","","Rouge/Lexers/Gherkin.html","",""],["Rouge::Lexers::Gherkin::Keyword","","Rouge/Lexers/Gherkin/Keyword.html","",""],["Rouge::Lexers::Gherkin::Name","","Rouge/Lexers/Gherkin/Name.html","",""],["Rouge::Lexers::Glsl","","Rouge/Lexers/Glsl.html","","<p>This file defines the GLSL language lexer to the Rouge syntax highlighter.\n<p>Author: Sri Harsha Chilakapati …\n"],["Rouge::Lexers::Go","","Rouge/Lexers/Go.html","",""],["Rouge::Lexers::Go::Keyword","","Rouge/Lexers/Go/Keyword.html","",""],["Rouge::Lexers::Go::Name","","Rouge/Lexers/Go/Name.html","",""],["Rouge::Lexers::Go::Str","","Rouge/Lexers/Go/Str.html","",""],["Rouge::Lexers::Groovy","","Rouge/Lexers/Groovy.html","",""],["Rouge::Lexers::HTML","","Rouge/Lexers/HTML.html","",""],["Rouge::Lexers::HTML::Comment","","Rouge/Lexers/HTML/Comment.html","",""],["Rouge::Lexers::HTML::Name","","Rouge/Lexers/HTML/Name.html","",""],["Rouge::Lexers::HTTP","","Rouge/Lexers/HTTP.html","",""],["Rouge::Lexers::HTTP::Name","","Rouge/Lexers/HTTP/Name.html","",""],["Rouge::Lexers::Haml","","Rouge/Lexers/Haml.html","","<p>A lexer for the Haml templating system for Ruby. @see haml.info\n"],["Rouge::Lexers::Haml::Comment","","Rouge/Lexers/Haml/Comment.html","",""],["Rouge::Lexers::Haml::Name","","Rouge/Lexers/Haml/Name.html","",""],["Rouge::Lexers::Haml::Name::Variable","","Rouge/Lexers/Haml/Name/Variable.html","",""],["Rouge::Lexers::Haml::Str","","Rouge/Lexers/Haml/Str.html","",""],["Rouge::Lexers::Handlebars","","Rouge/Lexers/Handlebars.html","",""],["Rouge::Lexers::Handlebars::Keyword","","Rouge/Lexers/Handlebars/Keyword.html","",""],["Rouge::Lexers::Handlebars::Name","","Rouge/Lexers/Handlebars/Name.html","",""],["Rouge::Lexers::Handlebars::Name::Builtin","","Rouge/Lexers/Handlebars/Name/Builtin.html","",""],["Rouge::Lexers::Handlebars::Str","","Rouge/Lexers/Handlebars/Str.html","",""],["Rouge::Lexers::Haskell","","Rouge/Lexers/Haskell.html","",""],["Rouge::Lexers::Haskell::Comment","","Rouge/Lexers/Haskell/Comment.html","",""],["Rouge::Lexers::Haskell::Keyword","","Rouge/Lexers/Haskell/Keyword.html","",""],["Rouge::Lexers::Haskell::Name","","Rouge/Lexers/Haskell/Name.html","",""],["Rouge::Lexers::Haskell::Num","","Rouge/Lexers/Haskell/Num.html","",""],["Rouge::Lexers::Haskell::Str","","Rouge/Lexers/Haskell/Str.html","",""],["Rouge::Lexers::INI","","Rouge/Lexers/INI.html","",""],["Rouge::Lexers::INI::Name","","Rouge/Lexers/INI/Name.html","",""],["Rouge::Lexers::INI::Str","","Rouge/Lexers/INI/Str.html","",""],["Rouge::Lexers::IO","","Rouge/Lexers/IO.html","",""],["Rouge::Lexers::IO::Comment","","Rouge/Lexers/IO/Comment.html","",""],["Rouge::Lexers::IO::Keyword","","Rouge/Lexers/IO/Keyword.html","",""],["Rouge::Lexers::IO::Name","","Rouge/Lexers/IO/Name.html","",""],["Rouge::Lexers::IO::Num","","Rouge/Lexers/IO/Num.html","",""],["Rouge::Lexers::JSON","","Rouge/Lexers/JSON.html","",""],["Rouge::Lexers::JSON::Keyword","","Rouge/Lexers/JSON/Keyword.html","",""],["Rouge::Lexers::JSON::Name","","Rouge/Lexers/JSON/Name.html","",""],["Rouge::Lexers::JSON::Num","","Rouge/Lexers/JSON/Num.html","",""],["Rouge::Lexers::JSON::Str","","Rouge/Lexers/JSON/Str.html","",""],["Rouge::Lexers::JSON::Text","","Rouge/Lexers/JSON/Text.html","",""],["Rouge::Lexers::JSONDOC","","Rouge/Lexers/JSONDOC.html","",""],["Rouge::Lexers::JSONDOC::Comment","","Rouge/Lexers/JSONDOC/Comment.html","",""],["Rouge::Lexers::Java","","Rouge/Lexers/Java.html","",""],["Rouge::Lexers::Javascript","","Rouge/Lexers/Javascript.html","",""],["Rouge::Lexers::Javascript::Comment","","Rouge/Lexers/Javascript/Comment.html","",""],["Rouge::Lexers::Javascript::Keyword","","Rouge/Lexers/Javascript/Keyword.html","",""],["Rouge::Lexers::Javascript::Name","","Rouge/Lexers/Javascript/Name.html","",""],["Rouge::Lexers::Javascript::Num","","Rouge/Lexers/Javascript/Num.html","",""],["Rouge::Lexers::Javascript::Str","","Rouge/Lexers/Javascript/Str.html","",""],["Rouge::Lexers::LLVM","","Rouge/Lexers/LLVM.html","",""],["Rouge::Lexers::LLVM::Comment","","Rouge/Lexers/LLVM/Comment.html","",""],["Rouge::Lexers::LLVM::Keyword","","Rouge/Lexers/LLVM/Keyword.html","",""],["Rouge::Lexers::LLVM::Name","","Rouge/Lexers/LLVM/Name.html","",""],["Rouge::Lexers::LLVM::Name::Variable","","Rouge/Lexers/LLVM/Name/Variable.html","",""],["Rouge::Lexers::Liquid","","Rouge/Lexers/Liquid.html","",""],["Rouge::Lexers::Liquid::Keyword","","Rouge/Lexers/Liquid/Keyword.html","",""],["Rouge::Lexers::Liquid::Name","","Rouge/Lexers/Liquid/Name.html","",""],["Rouge::Lexers::Liquid::Num","","Rouge/Lexers/Liquid/Num.html","",""],["Rouge::Lexers::Liquid::Operator","","Rouge/Lexers/Liquid/Operator.html","",""],["Rouge::Lexers::Liquid::Str","","Rouge/Lexers/Liquid/Str.html","",""],["Rouge::Lexers::Liquid::Text","","Rouge/Lexers/Liquid/Text.html","",""],["Rouge::Lexers::LiterateCoffeescript","","Rouge/Lexers/LiterateCoffeescript.html","",""],["Rouge::Lexers::LiterateHaskell","","Rouge/Lexers/LiterateHaskell.html","",""],["Rouge::Lexers::LiterateHaskell::Name","","Rouge/Lexers/LiterateHaskell/Name.html","",""],["Rouge::Lexers::Lua","","Rouge/Lexers/Lua.html","",""],["Rouge::Lexers::Lua::Comment","","Rouge/Lexers/Lua/Comment.html","",""],["Rouge::Lexers::Lua::Keyword","","Rouge/Lexers/Lua/Keyword.html","",""],["Rouge::Lexers::Lua::Name","","Rouge/Lexers/Lua/Name.html","",""],["Rouge::Lexers::Lua::Num","","Rouge/Lexers/Lua/Num.html","",""],["Rouge::Lexers::Lua::Operator","","Rouge/Lexers/Lua/Operator.html","",""],["Rouge::Lexers::Lua::Str","","Rouge/Lexers/Lua/Str.html","",""],["Rouge::Lexers::Make","","Rouge/Lexers/Make.html","",""],["Rouge::Lexers::Make::Name","","Rouge/Lexers/Make/Name.html","",""],["Rouge::Lexers::Make::Str","","Rouge/Lexers/Make/Str.html","",""],["Rouge::Lexers::Markdown","","Rouge/Lexers/Markdown.html","",""],["Rouge::Lexers::Markdown::Generic","","Rouge/Lexers/Markdown/Generic.html","",""],["Rouge::Lexers::Markdown::Name","","Rouge/Lexers/Markdown/Name.html","",""],["Rouge::Lexers::Markdown::Str","","Rouge/Lexers/Markdown/Str.html","",""],["Rouge::Lexers::Matlab","","Rouge/Lexers/Matlab.html","",""],["Rouge::Lexers::Matlab::Comment","","Rouge/Lexers/Matlab/Comment.html","",""],["Rouge::Lexers::Matlab::Name","","Rouge/Lexers/Matlab/Name.html","",""],["Rouge::Lexers::Matlab::Num","","Rouge/Lexers/Matlab/Num.html","",""],["Rouge::Lexers::Matlab::Num::Integer","","Rouge/Lexers/Matlab/Num/Integer.html","",""],["Rouge::Lexers::Matlab::Str","","Rouge/Lexers/Matlab/Str.html","",""],["Rouge::Lexers::Moonscript","","Rouge/Lexers/Moonscript.html","",""],["Rouge::Lexers::Moonscript::Comment","","Rouge/Lexers/Moonscript/Comment.html","",""],["Rouge::Lexers::Moonscript::Keyword","","Rouge/Lexers/Moonscript/Keyword.html","",""],["Rouge::Lexers::Moonscript::Literal","","Rouge/Lexers/Moonscript/Literal.html","",""],["Rouge::Lexers::Moonscript::Literal::String","","Rouge/Lexers/Moonscript/Literal/String.html","",""],["Rouge::Lexers::Moonscript::Name","","Rouge/Lexers/Moonscript/Name.html","",""],["Rouge::Lexers::Moonscript::Name::Variable","","Rouge/Lexers/Moonscript/Name/Variable.html","",""],["Rouge::Lexers::Moonscript::Num","","Rouge/Lexers/Moonscript/Num.html","",""],["Rouge::Lexers::Moonscript::Operator","","Rouge/Lexers/Moonscript/Operator.html","",""],["Rouge::Lexers::Moonscript::Str","","Rouge/Lexers/Moonscript/Str.html","",""],["Rouge::Lexers::Moonscript::Text","","Rouge/Lexers/Moonscript/Text.html","",""],["Rouge::Lexers::Nginx","","Rouge/Lexers/Nginx.html","",""],["Rouge::Lexers::Nginx::Comment","","Rouge/Lexers/Nginx/Comment.html","",""],["Rouge::Lexers::Nginx::Keyword","","Rouge/Lexers/Nginx/Keyword.html","",""],["Rouge::Lexers::Nginx::Name","","Rouge/Lexers/Nginx/Name.html","",""],["Rouge::Lexers::Nginx::Num","","Rouge/Lexers/Nginx/Num.html","",""],["Rouge::Lexers::Nginx::Str","","Rouge/Lexers/Nginx/Str.html","",""],["Rouge::Lexers::Nim","","Rouge/Lexers/Nim.html","",""],["Rouge::Lexers::Nim::Keyword","","Rouge/Lexers/Nim/Keyword.html","",""],["Rouge::Lexers::Nim::Name","","Rouge/Lexers/Nim/Name.html","",""],["Rouge::Lexers::Nim::Num","","Rouge/Lexers/Nim/Num.html","",""],["Rouge::Lexers::Nim::Num::Integer","","Rouge/Lexers/Nim/Num/Integer.html","",""],["Rouge::Lexers::Nim::Operator","","Rouge/Lexers/Nim/Operator.html","",""],["Rouge::Lexers::Nim::Str","","Rouge/Lexers/Nim/Str.html","",""],["Rouge::Lexers::OCaml","","Rouge/Lexers/OCaml.html","",""],["Rouge::Lexers::OCaml::Keyword","","Rouge/Lexers/OCaml/Keyword.html","",""],["Rouge::Lexers::OCaml::Name","","Rouge/Lexers/OCaml/Name.html","",""],["Rouge::Lexers::OCaml::Name::Builtin","","Rouge/Lexers/OCaml/Name/Builtin.html","",""],["Rouge::Lexers::OCaml::Num","","Rouge/Lexers/OCaml/Num.html","",""],["Rouge::Lexers::OCaml::Operator","","Rouge/Lexers/OCaml/Operator.html","",""],["Rouge::Lexers::OCaml::Str","","Rouge/Lexers/OCaml/Str.html","",""],["Rouge::Lexers::ObjectiveC","","Rouge/Lexers/ObjectiveC.html","",""],["Rouge::Lexers::ObjectiveC::Comment","","Rouge/Lexers/ObjectiveC/Comment.html","",""],["Rouge::Lexers::ObjectiveC::Name","","Rouge/Lexers/ObjectiveC/Name.html","",""],["Rouge::Lexers::ObjectiveC::Num","","Rouge/Lexers/ObjectiveC/Num.html","",""],["Rouge::Lexers::ObjectiveC::Str","","Rouge/Lexers/ObjectiveC/Str.html","",""],["Rouge::Lexers::PHP","","Rouge/Lexers/PHP.html","",""],["Rouge::Lexers::PHP::Comment","","Rouge/Lexers/PHP/Comment.html","",""],["Rouge::Lexers::PHP::Keyword","","Rouge/Lexers/PHP/Keyword.html","",""],["Rouge::Lexers::PHP::Name","","Rouge/Lexers/PHP/Name.html","",""],["Rouge::Lexers::PHP::Num","","Rouge/Lexers/PHP/Num.html","",""],["Rouge::Lexers::PHP::Str","","Rouge/Lexers/PHP/Str.html","",""],["Rouge::Lexers::Perl","","Rouge/Lexers/Perl.html","",""],["Rouge::Lexers::Perl::Comment","","Rouge/Lexers/Perl/Comment.html","",""],["Rouge::Lexers::Perl::Operator","","Rouge/Lexers/Perl/Operator.html","",""],["Rouge::Lexers::Perl::Str","","Rouge/Lexers/Perl/Str.html","",""],["Rouge::Lexers::PlainText","","Rouge/Lexers/PlainText.html","",""],["Rouge::Lexers::Powershell","","Rouge/Lexers/Powershell.html","",""],["Rouge::Lexers::Powershell::Comment","","Rouge/Lexers/Powershell/Comment.html","",""],["Rouge::Lexers::Powershell::Keyword","","Rouge/Lexers/Powershell/Keyword.html","",""],["Rouge::Lexers::Powershell::Name","","Rouge/Lexers/Powershell/Name.html","",""],["Rouge::Lexers::Praat","","Rouge/Lexers/Praat.html","",""],["Rouge::Lexers::Praat::Comment","","Rouge/Lexers/Praat/Comment.html","",""],["Rouge::Lexers::Praat::Generic","","Rouge/Lexers/Praat/Generic.html","",""],["Rouge::Lexers::Praat::Literal","","Rouge/Lexers/Praat/Literal.html","",""],["Rouge::Lexers::Praat::Literal::String","","Rouge/Lexers/Praat/Literal/String.html","",""],["Rouge::Lexers::Praat::Name","","Rouge/Lexers/Praat/Name.html","",""],["Rouge::Lexers::Praat::Operator","","Rouge/Lexers/Praat/Operator.html","",""],["Rouge::Lexers::Prolog","","Rouge/Lexers/Prolog.html","",""],["Rouge::Lexers::Prolog::Comment","","Rouge/Lexers/Prolog/Comment.html","",""],["Rouge::Lexers::Prolog::Name","","Rouge/Lexers/Prolog/Name.html","",""],["Rouge::Lexers::Prolog::Num","","Rouge/Lexers/Prolog/Num.html","",""],["Rouge::Lexers::Prolog::Str","","Rouge/Lexers/Prolog/Str.html","",""],["Rouge::Lexers::Properties","","Rouge/Lexers/Properties.html","",""],["Rouge::Lexers::Properties::Name","","Rouge/Lexers/Properties/Name.html","",""],["Rouge::Lexers::Properties::Str","","Rouge/Lexers/Properties/Str.html","",""],["Rouge::Lexers::Puppet","","Rouge/Lexers/Puppet.html","",""],["Rouge::Lexers::Puppet::Keyword","","Rouge/Lexers/Puppet/Keyword.html","",""],["Rouge::Lexers::Puppet::Name","","Rouge/Lexers/Puppet/Name.html","",""],["Rouge::Lexers::Puppet::Operator","","Rouge/Lexers/Puppet/Operator.html","",""],["Rouge::Lexers::Puppet::Str","","Rouge/Lexers/Puppet/Str.html","",""],["Rouge::Lexers::Python","","Rouge/Lexers/Python.html","",""],["Rouge::Lexers::Python::Keyword","","Rouge/Lexers/Python/Keyword.html","",""],["Rouge::Lexers::Python::Name","","Rouge/Lexers/Python/Name.html","",""],["Rouge::Lexers::Python::Name::Builtin","","Rouge/Lexers/Python/Name/Builtin.html","",""],["Rouge::Lexers::Python::Num","","Rouge/Lexers/Python/Num.html","",""],["Rouge::Lexers::Python::Num::Integer","","Rouge/Lexers/Python/Num/Integer.html","",""],["Rouge::Lexers::Python::Operator","","Rouge/Lexers/Python/Operator.html","",""],["Rouge::Lexers::Python::Str","","Rouge/Lexers/Python/Str.html","",""],["Rouge::Lexers::Qml","","Rouge/Lexers/Qml.html","",""],["Rouge::Lexers::Qml::Keyword","","Rouge/Lexers/Qml/Keyword.html","",""],["Rouge::Lexers::Qml::Name","","Rouge/Lexers/Qml/Name.html","",""],["Rouge::Lexers::R","","Rouge/Lexers/R.html","",""],["Rouge::Lexers::R::Comment","","Rouge/Lexers/R/Comment.html","",""],["Rouge::Lexers::R::Keyword","","Rouge/Lexers/R/Keyword.html","",""],["Rouge::Lexers::R::Num","","Rouge/Lexers/R/Num.html","",""],["Rouge::Lexers::R::Str","","Rouge/Lexers/R/Str.html","",""],["Rouge::Lexers::Racket","","Rouge/Lexers/Racket.html","",""],["Rouge::Lexers::Racket::Comment","","Rouge/Lexers/Racket/Comment.html","",""],["Rouge::Lexers::Racket::Name","","Rouge/Lexers/Racket/Name.html","",""],["Rouge::Lexers::Racket::Num","","Rouge/Lexers/Racket/Num.html","",""],["Rouge::Lexers::Racket::Str","","Rouge/Lexers/Racket/Str.html","",""],["Rouge::Lexers::Ruby","","Rouge/Lexers/Ruby.html","",""],["Rouge::Lexers::Ruby::Comment","","Rouge/Lexers/Ruby/Comment.html","",""],["Rouge::Lexers::Ruby::Keyword","","Rouge/Lexers/Ruby/Keyword.html","",""],["Rouge::Lexers::Ruby::Name","","Rouge/Lexers/Ruby/Name.html","",""],["Rouge::Lexers::Ruby::Name::Variable","","Rouge/Lexers/Ruby/Name/Variable.html","",""],["Rouge::Lexers::Ruby::Num","","Rouge/Lexers/Ruby/Num.html","",""],["Rouge::Lexers::Ruby::Str","","Rouge/Lexers/Ruby/Str.html","",""],["Rouge::Lexers::Rust","","Rouge/Lexers/Rust.html","",""],["Rouge::Lexers::Rust::Comment","","Rouge/Lexers/Rust/Comment.html","",""],["Rouge::Lexers::Rust::Keyword","","Rouge/Lexers/Rust/Keyword.html","",""],["Rouge::Lexers::Rust::Name","","Rouge/Lexers/Rust/Name.html","",""],["Rouge::Lexers::Rust::Num","","Rouge/Lexers/Rust/Num.html","",""],["Rouge::Lexers::Rust::Str","","Rouge/Lexers/Rust/Str.html","",""],["Rouge::Lexers::SML","","Rouge/Lexers/SML.html","",""],["Rouge::Lexers::SML::Comment","","Rouge/Lexers/SML/Comment.html","",""],["Rouge::Lexers::SML::Keyword","","Rouge/Lexers/SML/Keyword.html","",""],["Rouge::Lexers::SML::Name","","Rouge/Lexers/SML/Name.html","",""],["Rouge::Lexers::SML::Num","","Rouge/Lexers/SML/Num.html","",""],["Rouge::Lexers::SML::Str","","Rouge/Lexers/SML/Str.html","",""],["Rouge::Lexers::SQL","","Rouge/Lexers/SQL.html","",""],["Rouge::Lexers::SQL::Comment","","Rouge/Lexers/SQL/Comment.html","",""],["Rouge::Lexers::SQL::Name","","Rouge/Lexers/SQL/Name.html","",""],["Rouge::Lexers::SQL::Num","","Rouge/Lexers/SQL/Num.html","",""],["Rouge::Lexers::SQL::Str","","Rouge/Lexers/SQL/Str.html","",""],["Rouge::Lexers::Sass","","Rouge/Lexers/Sass.html","",""],["Rouge::Lexers::Sass::Comment","","Rouge/Lexers/Sass/Comment.html","",""],["Rouge::Lexers::Sass::Name","","Rouge/Lexers/Sass/Name.html","",""],["Rouge::Lexers::SassCommon","","Rouge/Lexers/SassCommon.html","","<p>shared states with SCSS\n"],["Rouge::Lexers::SassCommon::Comment","","Rouge/Lexers/SassCommon/Comment.html","",""],["Rouge::Lexers::SassCommon::Name","","Rouge/Lexers/SassCommon/Name.html","",""],["Rouge::Lexers::SassCommon::Name::Builtin","","Rouge/Lexers/SassCommon/Name/Builtin.html","",""],["Rouge::Lexers::SassCommon::Num","","Rouge/Lexers/SassCommon/Num.html","",""],["Rouge::Lexers::SassCommon::Operator","","Rouge/Lexers/SassCommon/Operator.html","",""],["Rouge::Lexers::SassCommon::Str","","Rouge/Lexers/SassCommon/Str.html","",""],["Rouge::Lexers::Scala","","Rouge/Lexers/Scala.html","",""],["Rouge::Lexers::Scala::Comment","","Rouge/Lexers/Scala/Comment.html","",""],["Rouge::Lexers::Scala::Keyword","","Rouge/Lexers/Scala/Keyword.html","",""],["Rouge::Lexers::Scala::Name","","Rouge/Lexers/Scala/Name.html","",""],["Rouge::Lexers::Scala::Num","","Rouge/Lexers/Scala/Num.html","",""],["Rouge::Lexers::Scala::Str","","Rouge/Lexers/Scala/Str.html","",""],["Rouge::Lexers::Scheme","","Rouge/Lexers/Scheme.html","",""],["Rouge::Lexers::Scheme::Comment","","Rouge/Lexers/Scheme/Comment.html","",""],["Rouge::Lexers::Scheme::Name","","Rouge/Lexers/Scheme/Name.html","",""],["Rouge::Lexers::Scheme::Num","","Rouge/Lexers/Scheme/Num.html","",""],["Rouge::Lexers::Scheme::Str","","Rouge/Lexers/Scheme/Str.html","",""],["Rouge::Lexers::Scss","","Rouge/Lexers/Scss.html","",""],["Rouge::Lexers::Scss::Comment","","Rouge/Lexers/Scss/Comment.html","",""],["Rouge::Lexers::Sed","","Rouge/Lexers/Sed.html","",""],["Rouge::Lexers::Sed::Keyword","","Rouge/Lexers/Sed/Keyword.html","",""],["Rouge::Lexers::Sed::Name","","Rouge/Lexers/Sed/Name.html","",""],["Rouge::Lexers::Sed::Regex","","Rouge/Lexers/Sed/Regex.html","",""],["Rouge::Lexers::Sed::Regex::Name","","Rouge/Lexers/Sed/Regex/Name.html","",""],["Rouge::Lexers::Sed::Regex::Str","","Rouge/Lexers/Sed/Regex/Str.html","",""],["Rouge::Lexers::Sed::Replacement","","Rouge/Lexers/Sed/Replacement.html","",""],["Rouge::Lexers::Sed::Replacement::Str","","Rouge/Lexers/Sed/Replacement/Str.html","",""],["Rouge::Lexers::Sed::Str","","Rouge/Lexers/Sed/Str.html","",""],["Rouge::Lexers::Shell","","Rouge/Lexers/Shell.html","",""],["Rouge::Lexers::Shell::Generic","","Rouge/Lexers/Shell/Generic.html","",""],["Rouge::Lexers::Shell::Name","","Rouge/Lexers/Shell/Name.html","",""],["Rouge::Lexers::Shell::Str","","Rouge/Lexers/Shell/Str.html","",""],["Rouge::Lexers::Slim","","Rouge/Lexers/Slim.html","","<p>A lexer for the Slim tempalte language @see slim-lang.org\n"],["Rouge::Lexers::Slim::Literal","","Rouge/Lexers/Slim/Literal.html","",""],["Rouge::Lexers::Slim::Name","","Rouge/Lexers/Slim/Name.html","",""],["Rouge::Lexers::Slim::Str","","Rouge/Lexers/Slim/Str.html","",""],["Rouge::Lexers::Slim::Text","","Rouge/Lexers/Slim/Text.html","",""],["Rouge::Lexers::Smalltalk","","Rouge/Lexers/Smalltalk.html","",""],["Rouge::Lexers::Smalltalk::Name","","Rouge/Lexers/Smalltalk/Name.html","",""],["Rouge::Lexers::Smalltalk::Name::Builtin","","Rouge/Lexers/Smalltalk/Name/Builtin.html","",""],["Rouge::Lexers::Smalltalk::Str","","Rouge/Lexers/Smalltalk/Str.html","",""],["Rouge::Lexers::Swift","","Rouge/Lexers/Swift.html","",""],["Rouge::Lexers::Swift::Comment","","Rouge/Lexers/Swift/Comment.html","",""],["Rouge::Lexers::Swift::Keyword","","Rouge/Lexers/Swift/Keyword.html","",""],["Rouge::Lexers::Swift::Name","","Rouge/Lexers/Swift/Name.html","",""],["Rouge::Lexers::Swift::Num","","Rouge/Lexers/Swift/Num.html","",""],["Rouge::Lexers::Swift::Str","","Rouge/Lexers/Swift/Str.html","",""],["Rouge::Lexers::TCL","","Rouge/Lexers/TCL.html","",""],["Rouge::Lexers::TCL::Name","","Rouge/Lexers/TCL/Name.html","",""],["Rouge::Lexers::TCL::Str","","Rouge/Lexers/TCL/Str.html","",""],["Rouge::Lexers::TOML","","Rouge/Lexers/TOML.html","",""],["Rouge::Lexers::TOML::Keyword","","Rouge/Lexers/TOML/Keyword.html","",""],["Rouge::Lexers::TOML::Literal","","Rouge/Lexers/TOML/Literal.html","",""],["Rouge::Lexers::TOML::Name","","Rouge/Lexers/TOML/Name.html","",""],["Rouge::Lexers::TOML::Num","","Rouge/Lexers/TOML/Num.html","",""],["Rouge::Lexers::TOML::Str","","Rouge/Lexers/TOML/Str.html","",""],["Rouge::Lexers::TeX","","Rouge/Lexers/TeX.html","",""],["Rouge::Lexers::TeX::Keyword","","Rouge/Lexers/TeX/Keyword.html","",""],["Rouge::Lexers::TeX::Name","","Rouge/Lexers/TeX/Name.html","",""],["Rouge::Lexers::TeX::Str","","Rouge/Lexers/TeX/Str.html","",""],["Rouge::Lexers::Tulip","","Rouge/Lexers/Tulip.html","",""],["Rouge::Lexers::Tulip::Keyword","","Rouge/Lexers/Tulip/Keyword.html","",""],["Rouge::Lexers::Tulip::Name","","Rouge/Lexers/Tulip/Name.html","",""],["Rouge::Lexers::Tulip::Str","","Rouge/Lexers/Tulip/Str.html","",""],["Rouge::Lexers::VimL","","Rouge/Lexers/VimL.html","",""],["Rouge::Lexers::VimL::Name","","Rouge/Lexers/VimL/Name.html","",""],["Rouge::Lexers::VimL::Num","","Rouge/Lexers/VimL/Num.html","",""],["Rouge::Lexers::VimL::Str","","Rouge/Lexers/VimL/Str.html","",""],["Rouge::Lexers::VisualBasic","","Rouge/Lexers/VisualBasic.html","",""],["Rouge::Lexers::VisualBasic::Comment","","Rouge/Lexers/VisualBasic/Comment.html","",""],["Rouge::Lexers::VisualBasic::Keyword","","Rouge/Lexers/VisualBasic/Keyword.html","",""],["Rouge::Lexers::VisualBasic::Literal","","Rouge/Lexers/VisualBasic/Literal.html","",""],["Rouge::Lexers::VisualBasic::Name","","Rouge/Lexers/VisualBasic/Name.html","",""],["Rouge::Lexers::VisualBasic::Num","","Rouge/Lexers/VisualBasic/Num.html","",""],["Rouge::Lexers::VisualBasic::Operator","","Rouge/Lexers/VisualBasic/Operator.html","",""],["Rouge::Lexers::VisualBasic::Str","","Rouge/Lexers/VisualBasic/Str.html","",""],["Rouge::Lexers::XML","","Rouge/Lexers/XML.html","",""],["Rouge::Lexers::XML::Comment","","Rouge/Lexers/XML/Comment.html","",""],["Rouge::Lexers::XML::Name","","Rouge/Lexers/XML/Name.html","",""],["Rouge::Lexers::YAML","","Rouge/Lexers/YAML.html","",""],["Rouge::Lexers::YAML::Comment","","Rouge/Lexers/YAML/Comment.html","",""],["Rouge::Lexers::YAML::Keyword","","Rouge/Lexers/YAML/Keyword.html","",""],["Rouge::Lexers::YAML::Name","","Rouge/Lexers/YAML/Name.html","",""],["Rouge::Lexers::YAML::Punctuation","","Rouge/Lexers/YAML/Punctuation.html","",""],["Rouge::Lexers::YAML::Str","","Rouge/Lexers/YAML/Str.html","",""],["Rouge::Plugins","","Rouge/Plugins.html","",""],["Rouge::Plugins::Redcarpet","","Rouge/Plugins/Redcarpet.html","",""],["Rouge::RegexLexer","","Rouge/RegexLexer.html","","<p>@abstract A stateful lexer that uses sets of regular expressions to\ntokenize a string.  Most lexers are …\n"],["Rouge::RegexLexer::Rule","","Rouge/RegexLexer/Rule.html","","<p>A rule is a tuple of a regular expression to test, and a callback to\nperform if the test succeeds.\n<p>@see …\n"],["Rouge::RegexLexer::State","","Rouge/RegexLexer/State.html","","<p>a State is a named set of rules that can be tested for or mixed in.\n<p>@see RegexLexer.state\n"],["Rouge::RegexLexer::StateDSL","","Rouge/RegexLexer/StateDSL.html","",""],["Rouge::TemplateLexer","","Rouge/TemplateLexer.html","","<p>@abstract A TemplateLexer is one that accepts a :parent option, to specify\nwhich language is being templated. …\n"],["Rouge::TextAnalyzer","","Rouge/TextAnalyzer.html","",""],["Rouge::Theme","","Rouge/Theme.html","",""],["Rouge::Theme::Style","","Rouge/Theme/Style.html","",""],["Rouge::Themes","","Rouge/Themes.html","",""],["Rouge::Themes::Base16","","Rouge/Themes/Base16.html","","<p>default base16 theme by Chris Kempson (chriskempson.com)\n"],["Rouge::Themes::Base16::Comment","","Rouge/Themes/Base16/Comment.html","",""],["Rouge::Themes::Base16::Generic","","Rouge/Themes/Base16/Generic.html","",""],["Rouge::Themes::Base16::Keyword","","Rouge/Themes/Base16/Keyword.html","",""],["Rouge::Themes::Base16::Literal","","Rouge/Themes/Base16/Literal.html","",""],["Rouge::Themes::Base16::Literal::String","","Rouge/Themes/Base16/Literal/String.html","",""],["Rouge::Themes::Base16::Monokai","","Rouge/Themes/Base16/Monokai.html","",""],["Rouge::Themes::Base16::Name","","Rouge/Themes/Base16/Name.html","",""],["Rouge::Themes::Base16::Solarized","","Rouge/Themes/Base16/Solarized.html","",""],["Rouge::Themes::Colorful","","Rouge/Themes/Colorful.html","","<p>stolen from pygments\n"],["Rouge::Themes::Colorful::Comment","","Rouge/Themes/Colorful/Comment.html","",""],["Rouge::Themes::Colorful::Generic","","Rouge/Themes/Colorful/Generic.html","",""],["Rouge::Themes::Colorful::Keyword","","Rouge/Themes/Colorful/Keyword.html","",""],["Rouge::Themes::Colorful::Literal","","Rouge/Themes/Colorful/Literal.html","",""],["Rouge::Themes::Colorful::Literal::Number","","Rouge/Themes/Colorful/Literal/Number.html","",""],["Rouge::Themes::Colorful::Literal::String","","Rouge/Themes/Colorful/Literal/String.html","",""],["Rouge::Themes::Colorful::Name","","Rouge/Themes/Colorful/Name.html","",""],["Rouge::Themes::Colorful::Name::Variable","","Rouge/Themes/Colorful/Name/Variable.html","",""],["Rouge::Themes::Colorful::Operator","","Rouge/Themes/Colorful/Operator.html","",""],["Rouge::Themes::Github","","Rouge/Themes/Github.html","",""],["Rouge::Themes::Github::Comment","","Rouge/Themes/Github/Comment.html","",""],["Rouge::Themes::Github::Generic","","Rouge/Themes/Github/Generic.html","",""],["Rouge::Themes::Github::Keyword","","Rouge/Themes/Github/Keyword.html","",""],["Rouge::Themes::Github::Literal","","Rouge/Themes/Github/Literal.html","",""],["Rouge::Themes::Github::Literal::Number","","Rouge/Themes/Github/Literal/Number.html","",""],["Rouge::Themes::Github::Literal::Number::Integer","","Rouge/Themes/Github/Literal/Number/Integer.html","",""],["Rouge::Themes::Github::Literal::String","","Rouge/Themes/Github/Literal/String.html","",""],["Rouge::Themes::Github::Name","","Rouge/Themes/Github/Name.html","",""],["Rouge::Themes::Github::Name::Builtin","","Rouge/Themes/Github/Name/Builtin.html","",""],["Rouge::Themes::Github::Name::Variable","","Rouge/Themes/Github/Name/Variable.html","",""],["Rouge::Themes::Github::Operator","","Rouge/Themes/Github/Operator.html","",""],["Rouge::Themes::Github::Text","","Rouge/Themes/Github/Text.html","",""],["Rouge::Themes::Molokai","","Rouge/Themes/Molokai.html","",""],["Rouge::Themes::Molokai::Comment","","Rouge/Themes/Molokai/Comment.html","",""],["Rouge::Themes::Molokai::Generic","","Rouge/Themes/Molokai/Generic.html","",""],["Rouge::Themes::Molokai::Keyword","","Rouge/Themes/Molokai/Keyword.html","",""],["Rouge::Themes::Molokai::Literal","","Rouge/Themes/Molokai/Literal.html","",""],["Rouge::Themes::Molokai::Literal::Number","","Rouge/Themes/Molokai/Literal/Number.html","",""],["Rouge::Themes::Molokai::Literal::Number::Integer","","Rouge/Themes/Molokai/Literal/Number/Integer.html","",""],["Rouge::Themes::Molokai::Literal::String","","Rouge/Themes/Molokai/Literal/String.html","",""],["Rouge::Themes::Molokai::Name","","Rouge/Themes/Molokai/Name.html","",""],["Rouge::Themes::Molokai::Name::Builtin","","Rouge/Themes/Molokai/Name/Builtin.html","",""],["Rouge::Themes::Molokai::Name::Variable","","Rouge/Themes/Molokai/Name/Variable.html","",""],["Rouge::Themes::Molokai::Operator","","Rouge/Themes/Molokai/Operator.html","",""],["Rouge::Themes::Molokai::Text","","Rouge/Themes/Molokai/Text.html","",""],["Rouge::Themes::Monokai","","Rouge/Themes/Monokai.html","",""],["Rouge::Themes::Monokai::Comment","","Rouge/Themes/Monokai/Comment.html","",""],["Rouge::Themes::Monokai::Generic","","Rouge/Themes/Monokai/Generic.html","",""],["Rouge::Themes::Monokai::Keyword","","Rouge/Themes/Monokai/Keyword.html","",""],["Rouge::Themes::Monokai::Literal","","Rouge/Themes/Monokai/Literal.html","",""],["Rouge::Themes::Monokai::Literal::Number","","Rouge/Themes/Monokai/Literal/Number.html","",""],["Rouge::Themes::Monokai::Literal::Number::Integer","","Rouge/Themes/Monokai/Literal/Number/Integer.html","",""],["Rouge::Themes::Monokai::Literal::String","","Rouge/Themes/Monokai/Literal/String.html","",""],["Rouge::Themes::Monokai::Name","","Rouge/Themes/Monokai/Name.html","",""],["Rouge::Themes::Monokai::Name::Builtin","","Rouge/Themes/Monokai/Name/Builtin.html","",""],["Rouge::Themes::Monokai::Name::Variable","","Rouge/Themes/Monokai/Name/Variable.html","",""],["Rouge::Themes::Monokai::Operator","","Rouge/Themes/Monokai/Operator.html","",""],["Rouge::Themes::Monokai::Text","","Rouge/Themes/Monokai/Text.html","",""],["Rouge::Themes::MonokaiSublime","","Rouge/Themes/MonokaiSublime.html","",""],["Rouge::Themes::MonokaiSublime::Comment","","Rouge/Themes/MonokaiSublime/Comment.html","",""],["Rouge::Themes::MonokaiSublime::Generic","","Rouge/Themes/MonokaiSublime/Generic.html","",""],["Rouge::Themes::MonokaiSublime::Keyword","","Rouge/Themes/MonokaiSublime/Keyword.html","",""],["Rouge::Themes::MonokaiSublime::Literal","","Rouge/Themes/MonokaiSublime/Literal.html","",""],["Rouge::Themes::MonokaiSublime::Literal::Number","","Rouge/Themes/MonokaiSublime/Literal/Number.html","",""],["Rouge::Themes::MonokaiSublime::Literal::Number::Integer","","Rouge/Themes/MonokaiSublime/Literal/Number/Integer.html","",""],["Rouge::Themes::MonokaiSublime::Literal::String","","Rouge/Themes/MonokaiSublime/Literal/String.html","",""],["Rouge::Themes::MonokaiSublime::Name","","Rouge/Themes/MonokaiSublime/Name.html","",""],["Rouge::Themes::MonokaiSublime::Name::Builtin","","Rouge/Themes/MonokaiSublime/Name/Builtin.html","",""],["Rouge::Themes::MonokaiSublime::Name::Variable","","Rouge/Themes/MonokaiSublime/Name/Variable.html","",""],["Rouge::Themes::MonokaiSublime::Operator","","Rouge/Themes/MonokaiSublime/Operator.html","",""],["Rouge::Themes::MonokaiSublime::Text","","Rouge/Themes/MonokaiSublime/Text.html","",""],["Rouge::Themes::ThankfulEyes","","Rouge/Themes/ThankfulEyes.html","",""],["Rouge::Themes::ThankfulEyes::Comment","","Rouge/Themes/ThankfulEyes/Comment.html","",""],["Rouge::Themes::ThankfulEyes::Generic","","Rouge/Themes/ThankfulEyes/Generic.html","",""],["Rouge::Themes::ThankfulEyes::Keyword","","Rouge/Themes/ThankfulEyes/Keyword.html","",""],["Rouge::Themes::ThankfulEyes::Literal","","Rouge/Themes/ThankfulEyes/Literal.html","",""],["Rouge::Themes::ThankfulEyes::Literal::String","","Rouge/Themes/ThankfulEyes/Literal/String.html","",""],["Rouge::Themes::ThankfulEyes::Name","","Rouge/Themes/ThankfulEyes/Name.html","",""],["Rouge::Themes::ThankfulEyes::Name::Builtin","","Rouge/Themes/ThankfulEyes/Name/Builtin.html","",""],["Rouge::Themes::ThankfulEyes::Text","","Rouge/Themes/ThankfulEyes/Text.html","",""],["Rouge::Token","","Rouge/Token.html","",""],["Rouge::Token::Tokens","","Rouge/Token/Tokens.html","",""],["<<","Rouge::InheritableList","Rouge/InheritableList.html#method-i-3C-3C","(o)",""],["[]","Rouge::InheritableHash","Rouge/InheritableHash.html#method-i-5B-5D","(k)",""],["[]","Rouge::Token","Rouge/Token.html#method-c-5B-5D","(qualname)",""],["aliases","Rouge::Lexer","Rouge/Lexer.html#method-c-aliases","(*args)","<p>Used to specify alternate names this lexer class may be found by.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Erb</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Lexer</span>\n  <span class=\"ruby-identifier\">tag</span> <span class=\"ruby-string\">&#39;erb&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["all","Rouge::Lexer","Rouge/Lexer.html#method-c-all","()","<p>@return a list of all lexers.\n"],["analyze_text","Rouge::Lexer","Rouge/Lexer.html#method-c-analyze_text","(text)","<p>@abstract\n<p>Return a number between 0 and 1 indicating the likelihood that the text\ngiven should be lexed …\n"],["analyze_text","Rouge::Lexers::C","Rouge/Lexers/C.html#method-c-analyze_text","(*)","<p>high priority for filename matches\n"],["analyze_text","Rouge::Lexers::Coffeescript","Rouge/Lexers/Coffeescript.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Diff","Rouge/Lexers/Diff.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::ERB","Rouge/Lexers/ERB.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Erlang","Rouge/Lexers/Erlang.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Factor","Rouge/Lexers/Factor.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Gherkin","Rouge/Lexers/Gherkin.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Go","Rouge/Lexers/Go.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::HTML","Rouge/Lexers/HTML.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Haml","Rouge/Lexers/Haml.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Haskell","Rouge/Lexers/Haskell.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::INI","Rouge/Lexers/INI.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::IO","Rouge/Lexers/IO.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::JSON","Rouge/Lexers/JSON.html#method-c-analyze_text","(text)","<p>TODO: is this too much of a performance hit?  JSON is quite simple, so\nI&#39;d think this wouldn&#39;t …\n"],["analyze_text","Rouge::Lexers::Javascript","Rouge/Lexers/Javascript.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::LLVM","Rouge/Lexers/LLVM.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Lua","Rouge/Lexers/Lua.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Make","Rouge/Lexers/Make.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Matlab","Rouge/Lexers/Matlab.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Moonscript","Rouge/Lexers/Moonscript.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::ObjectiveC","Rouge/Lexers/ObjectiveC.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::PHP","Rouge/Lexers/PHP.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Perl","Rouge/Lexers/Perl.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Praat","Rouge/Lexers/Praat.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Prolog","Rouge/Lexers/Prolog.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Properties","Rouge/Lexers/Properties.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Puppet","Rouge/Lexers/Puppet.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Python","Rouge/Lexers/Python.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::R","Rouge/Lexers/R.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Racket","Rouge/Lexers/Racket.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Ruby","Rouge/Lexers/Ruby.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Rust","Rouge/Lexers/Rust.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::SML","Rouge/Lexers/SML.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Sed","Rouge/Lexers/Sed.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Shell","Rouge/Lexers/Shell.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::TCL","Rouge/Lexers/TCL.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::TOML","Rouge/Lexers/TOML.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::TeX","Rouge/Lexers/TeX.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::Tulip","Rouge/Lexers/Tulip.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::XML","Rouge/Lexers/XML.html#method-c-analyze_text","(text)",""],["analyze_text","Rouge::Lexers::YAML","Rouge/Lexers/YAML.html#method-c-analyze_text","(text)",""],["append","Rouge::RegexLexer","Rouge/RegexLexer.html#method-c-append","(state, &b)",""],["appended","Rouge::RegexLexer::StateDSL","Rouge/RegexLexer/StateDSL.html#method-i-appended","(&defn)",""],["assert_utf8!","Rouge::Lexer","Rouge/Lexer.html#method-c-assert_utf8-21","(str)","<p>@private\n"],["at_builtins","Rouge::Lexers::ObjectiveC","Rouge/Lexers/ObjectiveC.html#method-c-at_builtins","()",""],["at_keywords","Rouge::Lexers::ObjectiveC","Rouge/Lexers/ObjectiveC.html#method-c-at_keywords","()",""],["attributes","Rouge::Lexers::CSS","Rouge/Lexers/CSS.html#method-c-attributes","()",""],["base_style","Rouge::Theme","Rouge/Theme.html#method-c-base_style","()",""],["best_by_source","Rouge::Lexer","Rouge/Lexer.html#method-c-best_by_source","(lexers, source, threshold=0)",""],["bg","Rouge::Formatters::Terminal256::EscapeSequence","Rouge/Formatters/Terminal256/EscapeSequence.html#method-i-bg","()",""],["block_code","Rouge::Plugins::Redcarpet","Rouge/Plugins/Redcarpet.html#method-i-block_code","(code, language)",""],["builtins","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::C","Rouge/Lexers/C.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::CSS","Rouge/Lexers/CSS.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Clojure","Rouge/Lexers/Clojure.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Coffeescript","Rouge/Lexers/Coffeescript.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Factor","Rouge/Lexers/Factor.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Glsl","Rouge/Lexers/Glsl.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::IO","Rouge/Lexers/IO.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Javascript","Rouge/Lexers/Javascript.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Lua","Rouge/Lexers/Lua.html#method-i-builtins","()",""],["builtins","Rouge::Lexers::Lua","Rouge/Lexers/Lua.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Matlab","Rouge/Lexers/Matlab.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Moonscript","Rouge/Lexers/Moonscript.html#method-i-builtins","()",""],["builtins","Rouge::Lexers::ObjectiveC","Rouge/Lexers/ObjectiveC.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::PHP","Rouge/Lexers/PHP.html#method-i-builtins","()",""],["builtins","Rouge::Lexers::PHP","Rouge/Lexers/PHP.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Python","Rouge/Lexers/Python.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Racket","Rouge/Lexers/Racket.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Rust","Rouge/Lexers/Rust.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::Scheme","Rouge/Lexers/Scheme.html#method-c-builtins","()",""],["builtins","Rouge::Lexers::VisualBasic","Rouge/Lexers/VisualBasic.html#method-c-builtins","()",""],["builtins_pseudo","Rouge::Lexers::Python","Rouge/Lexers/Python.html#method-c-builtins_pseudo","()",""],["cache","Rouge::Token","Rouge/Token.html#method-c-cache","()",""],["class_from_arg","Rouge::CLI","Rouge/CLI.html#method-c-class_from_arg","(arg)",""],["classes","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-classes","()",""],["closest_color","Rouge::Formatters::Terminal256::EscapeSequence","Rouge/Formatters/Terminal256/EscapeSequence.html#method-c-closest_color","(r, g, b)",""],["coffee","Rouge::Lexers::LiterateCoffeescript","Rouge/Lexers/LiterateCoffeescript.html#method-i-coffee","()",""],["color_index","Rouge::Formatters::Terminal256::EscapeSequence","Rouge/Formatters/Terminal256/EscapeSequence.html#method-c-color_index","(color)",""],["commands","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-commands","()",""],["constants","Rouge::Lexers::CSS","Rouge/Lexers/CSS.html#method-c-constants","()",""],["constants","Rouge::Lexers::Coffeescript","Rouge/Lexers/Coffeescript.html#method-c-constants","()",""],["constants","Rouge::Lexers::Groovy","Rouge/Lexers/Groovy.html#method-c-constants","()",""],["constants","Rouge::Lexers::IO","Rouge/Lexers/IO.html#method-c-constants","()",""],["constants","Rouge::Lexers::Javascript","Rouge/Lexers/Javascript.html#method-c-constants","()",""],["constants","Rouge::Lexers::Puppet","Rouge/Lexers/Puppet.html#method-c-constants","()",""],["content_lexer","Rouge::Lexers::HTTP","Rouge/Lexers/HTTP.html#method-i-content_lexer","()",""],["continue_indent","Rouge::Lexers::YAML","Rouge/Lexers/YAML.html#method-i-continue_indent","(match)",""],["controls","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-controls","()",""],["css_selector","Rouge::CSSTheme","Rouge/CSSTheme.html#method-i-css_selector","(token)",""],["dark!","Rouge::Themes::Base16","Rouge/Themes/Base16.html#method-c-dark-21","()",""],["debug","Rouge::Lexer","Rouge/Lexer.html#method-i-debug","()","<p>@deprecated Instead of `debug { “foo” }`, simply `puts “foo” if @debug`.\n<p>Leave a debug …\n"],["declarations","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-declarations","()",""],["declarations","Rouge::Lexers::Groovy","Rouge/Lexers/Groovy.html#method-c-declarations","()",""],["declarations","Rouge::Lexers::Javascript","Rouge/Lexers/Javascript.html#method-c-declarations","()",""],["dedent?","Rouge::Lexers::YAML","Rouge/Lexers/YAML.html#method-i-dedent-3F","(level)",""],["default_options","Rouge::Lexer","Rouge/Lexer.html#method-c-default_options","(o={})",""],["delegate","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-delegate","(lexer, text=nil)","<p>Delegate the lex to another lexer.  The #lex method will be called with\n`:continue` set to true, so that …\n"],["demo","Rouge::Lexer","Rouge/Lexer.html#method-c-demo","(arg=:absent)","<p>Specify or get a small demo string for this lexer\n"],["demo_file","Rouge::Lexer","Rouge/Lexer.html#method-c-demo_file","(arg=:absent)","<p>Specify or get the path name containing a small demo for this lexer (can be\noverriden by {demo}).\n"],["desc","Rouge::CLI::Help","Rouge/CLI/Help.html#method-c-desc","()",""],["desc","Rouge::CLI::Help::Highlight","Rouge/CLI/Help/Highlight.html#method-c-desc","()",""],["desc","Rouge::CLI::Help::Highlight::Style","Rouge/CLI/Help/Highlight/Style.html#method-c-desc","()",""],["desc","Rouge::CLI::Help::Highlight::Style::List","Rouge/CLI/Help/Highlight/Style/List.html#method-c-desc","()",""],["desc","Rouge::CLI::Version","Rouge/CLI/Version.html#method-c-desc","()",""],["desc","Rouge::Lexer","Rouge/Lexer.html#method-c-desc","(arg=:absent)","<p>Specify or get this lexer&#39;s description.\n"],["doc","Rouge::CLI","Rouge/CLI.html#method-c-doc","()",""],["doc","Rouge::CLI::Help","Rouge/CLI/Help.html#method-c-doc","()",""],["doc","Rouge::CLI::Help::Highlight","Rouge/CLI/Help/Highlight.html#method-c-doc","()",""],["doc","Rouge::CLI::Help::Highlight::Style","Rouge/CLI/Help/Highlight/Style.html#method-c-doc","()",""],["doc","Rouge::CLI::Help::Highlight::Style::List","Rouge/CLI/Help/Highlight/Style/List.html#method-c-doc","()",""],["doctype","Rouge::TextAnalyzer","Rouge/TextAnalyzer.html#method-i-doctype","()","<p>Return the contents of the doctype tag if present, nil otherwise.\n"],["doctype?","Rouge::TextAnalyzer","Rouge/TextAnalyzer.html#method-i-doctype-3F","(type=//)","<p>Check if the doctype matches a given regexp or string\n"],["each","Rouge::InheritableHash","Rouge/InheritableHash.html#method-i-each","(&b)",""],["each","Rouge::InheritableList","Rouge/InheritableList.html#method-i-each","(&b)",""],["each_token","Rouge::Token","Rouge/Token.html#method-c-each_token","(&b)",""],["error!","Rouge::CLI","Rouge/CLI.html#method-c-error-21","(msg, status=1)",""],["error!","Rouge::CLI","Rouge/CLI.html#method-i-error-21","(*a)",""],["escape","Rouge::Formatters::Terminal256::EscapeSequence","Rouge/Formatters/Terminal256/EscapeSequence.html#method-i-escape","(attrs)",""],["escape_sequence","Rouge::Formatters::Terminal256","Rouge/Formatters/Terminal256.html#method-i-escape_sequence","(token)","<p>private\n"],["exceptions","Rouge::Lexers::Python","Rouge/Lexers/Python.html#method-c-exceptions","()",""],["fg","Rouge::Formatters::Terminal256::EscapeSequence","Rouge/Formatters/Terminal256/EscapeSequence.html#method-i-fg","()",""],["file","Rouge::FileReader","Rouge/FileReader.html#method-i-file","()",""],["filenames","Rouge::Lexer","Rouge/Lexer.html#method-c-filenames","(*fnames)","<p>Specify a list of filename globs associated with this lexer.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Ruby</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Lexer</span>\n  <span class=\"ruby-identifier\">filenames</span> <span class=\"ruby-string\">&#39;*.rb&#39;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["filter_by_filename","Rouge::Lexer","Rouge/Lexer.html#method-c-filter_by_filename","(lexers, fname)","<p>returns a list of lexers that match the given filename with equal\nspecificity (i.e. number of wildcards …\n"],["filter_by_mimetype","Rouge::Lexer","Rouge/Lexer.html#method-c-filter_by_mimetype","(lexers, mt)",""],["filters","Rouge::Lexers::Haml","Rouge/Lexers/Haml.html#method-i-filters","()",""],["filters","Rouge::Lexers::Slim","Rouge/Lexers/Slim.html#method-i-filters","()",""],["find","Rouge::Formatter","Rouge/Formatter.html#method-c-find","(tag)","<p>Find a formatter class given a unique tag.\n"],["find","Rouge::Lexer","Rouge/Lexer.html#method-c-find","(name)","<p>Given a string, return the correct lexer class.\n"],["find","Rouge::Theme","Rouge/Theme.html#method-c-find","(n)",""],["find_fancy","Rouge::Lexer","Rouge/Lexer.html#method-c-find_fancy","(str, code=nil)","<p>Find a lexer, with fancy shiny features.\n<p>The string you pass can include CGI-style options\n\n<pre>Lexer.find_fancy(&#39;erb?parent=tex&#39;)</pre>\n"],["find_likely_mapping","Rouge::Lexers::VimL","Rouge/Lexers/VimL.html#method-i-find_likely_mapping","(mapping, word)","<p>binary search through the mappings to find the one that&#39;s likely to\nactually work.\n"],["format","Rouge::Formatter","Rouge/Formatter.html#method-c-format","(tokens, opts={}, &b)","<p>Format a token stream.  Delegates to {#format}.\n"],["format","Rouge::Formatter","Rouge/Formatter.html#method-i-format","(tokens, &b)","<p>Format a token stream.\n"],["gen_command_state","Rouge::Lexers::TCL","Rouge/Lexers/TCL.html#method-c-gen_command_state","(name='')",""],["gen_delimiter_states","Rouge::Lexers::TCL","Rouge/Lexers/TCL.html#method-c-gen_delimiter_states","(name, close, opts={})",""],["get_mode","Rouge::HasModes","Rouge/HasModes.html#method-i-get_mode","(mode)",""],["get_own_style","Rouge::Theme","Rouge/Theme.html#method-c-get_own_style","(token)",""],["get_rgb","Rouge::Formatters::Terminal256::EscapeSequence","Rouge/Formatters/Terminal256/EscapeSequence.html#method-c-get_rgb","(color)",""],["get_state","Rouge::RegexLexer","Rouge/RegexLexer.html#method-c-get_state","(name)","<p>@private\n"],["get_state","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-get_state","(state_name)","<p>@private\n"],["get_style","Rouge::Formatters::Terminal256","Rouge/Formatters/Terminal256.html#method-i-get_style","(token)",""],["get_style","Rouge::Theme","Rouge/Theme.html#method-c-get_style","(token)",""],["goto","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-goto","(state_name)","<p>replace the head of the stack with the given state\n"],["group","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-group","(tok)","<p>@deprecated\n<p>Yield a token with the next matched group.  Subsequent calls to this method\nwill yield subsequent …\n"],["groups","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-groups","(*tokens)","<p>Yield tokens corresponding to the matched groups of the current match.\n"],["guess","Rouge::Lexer","Rouge/Lexer.html#method-c-guess","(info={})","<p>Guess which lexer to use based on a hash of info.\n<p>@option info :mimetype\n\n<pre>A mimetype to guess by</pre>\n"],["guess_by_filename","Rouge::Lexer","Rouge/Lexer.html#method-c-guess_by_filename","(fname)",""],["guess_by_mimetype","Rouge::Lexer","Rouge/Lexer.html#method-c-guess_by_mimetype","(mt)",""],["guess_by_source","Rouge::Lexer","Rouge/Lexer.html#method-c-guess_by_source","(source)",""],["guesses","Rouge::Lexer","Rouge/Lexer.html#method-c-guesses","(info={})","<p>Guess which lexer to use based on a hash of info.\n<p>This accepts the same arguments as Lexer.guess, but …\n"],["handler_params","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-handler_params","()",""],["haskell","Rouge::Lexers::LiterateHaskell","Rouge/Lexers/LiterateHaskell.html#method-i-haskell","()",""],["highlight","Rouge","Rouge.html#method-c-highlight","(text, lexer, formatter, &b)","<p>Highlight some text with a given lexer and formatter.\n<p>@example\n\n<pre>Rouge.highlight(&#39;@foo = 1&#39;, &#39;ruby&#39;, &#39;html&#39;) ...</pre>\n"],["html","Rouge::Lexers::Haml","Rouge/Lexers/Haml.html#method-i-html","()",""],["html","Rouge::Lexers::Markdown","Rouge/Lexers/Markdown.html#method-i-html","()",""],["html","Rouge::Lexers::Slim","Rouge/Lexers/Slim.html#method-i-html","()",""],["in_state?","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-in_state-3F","(state_name)","<p>Check if `state_name` is in the state stack.\n"],["include?","Rouge::InheritableHash","Rouge/InheritableHash.html#method-i-include-3F","(k)",""],["indent","Rouge::Lexers::YAML","Rouge/Lexers/YAML.html#method-i-indent","()",""],["indent?","Rouge::Lexers::YAML","Rouge/Lexers/YAML.html#method-i-indent-3F","(level)",""],["indentation","Rouge::Indentation","Rouge/Indentation.html#method-i-indentation","(indent_str)","<p>handle a single indented line\n"],["inflate_token","Rouge::CSSTheme","Rouge/CSSTheme.html#method-i-inflate_token","(tok, &b)","<p>yield all of the tokens that should be styled the same as the given token. \nEssentially this recursively …\n"],["input","Rouge::CLI::Help::Highlight","Rouge/CLI/Help/Highlight.html#method-i-input","()",""],["input_stream","Rouge::CLI::Help::Highlight","Rouge/CLI/Help/Highlight.html#method-i-input_stream","()",""],["inspect","Rouge::RegexLexer::Rule","Rouge/RegexLexer/Rule.html#method-i-inspect","()",""],["inspect","Rouge::RegexLexer::State","Rouge/RegexLexer/State.html#method-i-inspect","()",""],["inspect","Rouge::Token","Rouge/Token.html#method-c-inspect","()",""],["keyopts","Rouge::Lexers::OCaml","Rouge/Lexers/OCaml.html#method-c-keyopts","()",""],["keys","Rouge::InheritableHash","Rouge/InheritableHash.html#method-i-keys","()",""],["keywords","Rouge::Lexers::C","Rouge/Lexers/C.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Clojure","Rouge/Lexers/Clojure.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Coffeescript","Rouge/Lexers/Coffeescript.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Cpp","Rouge/Lexers/Cpp.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Gherkin","Rouge/Lexers/Gherkin.html#method-c-keywords","()","<p>self-modifying method that loads the keywords file\n"],["keywords","Rouge::Lexers::Glsl","Rouge/Lexers/Glsl.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Groovy","Rouge/Lexers/Groovy.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Javascript","Rouge/Lexers/Javascript.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Matlab","Rouge/Lexers/Matlab.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::OCaml","Rouge/Lexers/OCaml.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::PHP","Rouge/Lexers/PHP.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Puppet","Rouge/Lexers/Puppet.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Python","Rouge/Lexers/Python.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::R","Rouge/Lexers/R.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Racket","Rouge/Lexers/Racket.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Rust","Rouge/Lexers/Rust.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::SML","Rouge/Lexers/SML.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::SQL","Rouge/Lexers/SQL.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::Scheme","Rouge/Lexers/Scheme.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::VimL","Rouge/Lexers/VimL.html#method-c-keywords","()",""],["keywords","Rouge::Lexers::VisualBasic","Rouge/Lexers/VisualBasic.html#method-c-keywords","()",""],["keywords_type","Rouge::Lexers::C","Rouge/Lexers/C.html#method-c-keywords_type","()",""],["keywords_type","Rouge::Lexers::Glsl","Rouge/Lexers/Glsl.html#method-c-keywords_type","()",""],["keywords_type","Rouge::Lexers::VisualBasic","Rouge/Lexers/VisualBasic.html#method-c-keywords_type","()",""],["lex","Rouge::Lexer","Rouge/Lexer.html#method-c-lex","(stream, opts={}, &b)","<p>Lexes `stream` with the given options.  The lex is delegated to a new\ninstance.\n<p>@see #lex\n"],["lex","Rouge::Lexer","Rouge/Lexer.html#method-i-lex","(string, opts={}, &b)","<p>Given a string, yield [token, chunk] pairs.  If no block is given, an\nenumerator is returned.\n<p>@option …\n"],["lexer","Rouge::CLI::Help::Highlight","Rouge/CLI/Help/Highlight.html#method-i-lexer","()",""],["lexer_class","Rouge::CLI::Help::Highlight","Rouge/CLI/Help/Highlight.html#method-i-lexer_class","()",""],["lexes_cleanly?","Rouge::TextAnalyzer","Rouge/TextAnalyzer.html#method-i-lexes_cleanly-3F","(lexer)","<p>Return true if the result of lexing with the given lexer contains no error\ntokens.\n"],["light!","Rouge::Themes::Base16","Rouge/Themes/Base16.html#method-c-light-21","()",""],["literals","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-literals","()",""],["load!","Rouge::RegexLexer::StateDSL","Rouge/RegexLexer/StateDSL.html#method-i-load-21","()",""],["load_lexer","Rouge::Lexers","Rouge/Lexers.html#method-c-load_lexer","(relpath)",""],["macro_closed?","Rouge::Lexers::Rust","Rouge/Lexers/Rust.html#method-i-macro_closed-3F","()",""],["make_dark!","Rouge::Themes::Base16","Rouge/Themes/Base16.html#method-c-make_dark-21","()",""],["make_light!","Rouge::Themes::Base16","Rouge/Themes/Base16.html#method-c-make_light-21","()",""],["make_token","Rouge::Token","Rouge/Token.html#method-c-make_token","(name, shortname, &b)",""],["mapping_contains?","Rouge::Lexers::VimL","Rouge/Lexers/VimL.html#method-i-mapping_contains-3F","(mapping, word)",""],["markdown","Rouge::Lexers::LiterateCoffeescript","Rouge/Lexers/LiterateCoffeescript.html#method-i-markdown","()",""],["matches?","Rouge::Token","Rouge/Token.html#method-c-matches-3F","(other)",""],["message","Rouge::Lexer::AmbiguousGuess","Rouge/Lexer/AmbiguousGuess.html#method-i-message","()",""],["metaparameters","Rouge::Lexers::Puppet","Rouge/Lexers/Puppet.html#method-c-metaparameters","()",""],["methods","Rouge::Lexers::HTTP","Rouge/Lexers/HTTP.html#method-c-methods","()",""],["mimetypes","Rouge::Lexer","Rouge/Lexer.html#method-c-mimetypes","(*mts)","<p>Specify a list of mimetypes associated with this lexer.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Html</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Lexer</span>\n  <span class=\"ruby-identifier\">mimetypes</span> <span class=\"ruby-string\">&#39;text/html&#39;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mixin","Rouge::RegexLexer::StateDSL","Rouge/RegexLexer/StateDSL.html#method-i-mixin","(state)","<p>Mix in the rules from another state into this state.  The rules from the\nmixed-in state will be tried …\n"],["mode","Rouge::HasModes","Rouge/HasModes.html#method-i-mode","(arg=:absent)",""],["mode!","Rouge::HasModes","Rouge/HasModes.html#method-i-mode-21","(arg)",""],["name","Rouge::Theme","Rouge/Theme.html#method-c-name","(n=nil)",""],["name_for_token","Rouge::Lexers::Apache","Rouge/Lexers/Apache.html#method-i-name_for_token","(token)",""],["name_token","Rouge::Lexers::Clojure","Rouge/Lexers/Clojure.html#method-i-name_token","(name)",""],["new","Rouge::CLI","Rouge/CLI.html#method-c-new","(options={})",""],["new","Rouge::CLI::Error","Rouge/CLI/Error.html#method-c-new","(message, status=1)",""],["new","Rouge::CLI::Help","Rouge/CLI/Help.html#method-c-new","(opts={})",""],["new","Rouge::CLI::Help::Highlight","Rouge/CLI/Help/Highlight.html#method-c-new","(opts={})",""],["new","Rouge::CLI::Help::Highlight::Style","Rouge/CLI/Help/Highlight/Style.html#method-c-new","(opts)",""],["new","Rouge::CSSTheme","Rouge/CSSTheme.html#method-c-new","(opts={})",""],["new","Rouge::FileReader","Rouge/FileReader.html#method-c-new","(input)",""],["new","Rouge::Formatters::HTML","Rouge/Formatters/HTML.html#method-c-new","(opts={})","<p>@option opts [String] :css_class (&#39;highlight&#39;) @option opts\n[true/false] :line_numbers (false) …\n"],["new","Rouge::Formatters::HTMLInline","Rouge/Formatters/HTMLInline.html#method-c-new","(theme)",""],["new","Rouge::Formatters::HTMLLinewise","Rouge/Formatters/HTMLLinewise.html#method-c-new","(formatter, opts={})",""],["new","Rouge::Formatters::Null","Rouge/Formatters/Null.html#method-c-new","(*)",""],["new","Rouge::Formatters::Terminal256","Rouge/Formatters/Terminal256.html#method-c-new","(opts={})","<p>@option opts :theme\n\n<pre>(default is thankful_eyes) the theme to render with.</pre>\n"],["new","Rouge::Formatters::Terminal256::EscapeSequence","Rouge/Formatters/Terminal256/EscapeSequence.html#method-c-new","(style)",""],["new","Rouge::InheritableHash","Rouge/InheritableHash.html#method-c-new","(parent=nil)",""],["new","Rouge::InheritableList","Rouge/InheritableList.html#method-c-new","(parent=nil)",""],["new","Rouge::Lexer","Rouge/Lexer.html#method-c-new","(opts={})","<p>Create a new lexer with the given options.  Individual lexers may specify\nextra options.  The only current …\n"],["new","Rouge::Lexer::AmbiguousGuess","Rouge/Lexer/AmbiguousGuess.html#method-c-new","(alternatives)",""],["new","Rouge::Lexers::ERB","Rouge/Lexers/ERB.html#method-c-new","(opts={})",""],["new","Rouge::Lexers::Haml","Rouge/Lexers/Haml.html#method-c-new","(opts={})","<p>@option opts :filters\n\n<pre>A hash of filter name to lexer of how various filters should be\nhighlighted.  By ...</pre>\n"],["new","Rouge::Lexers::Lua","Rouge/Lexers/Lua.html#method-c-new","(opts={})",""],["new","Rouge::Lexers::Make","Rouge/Lexers/Make.html#method-c-new","(opts={})",""],["new","Rouge::Lexers::Moonscript","Rouge/Lexers/Moonscript.html#method-c-new","(opts={})",""],["new","Rouge::Lexers::PHP","Rouge/Lexers/PHP.html#method-c-new","(opts={})",""],["new","Rouge::RegexLexer::Rule","Rouge/RegexLexer/Rule.html#method-c-new","(re, callback)",""],["new","Rouge::RegexLexer::State","Rouge/RegexLexer/State.html#method-c-new","(name, rules)",""],["new","Rouge::RegexLexer::StateDSL","Rouge/RegexLexer/StateDSL.html#method-c-new","(name, &defn)",""],["new","Rouge::Theme::Style","Rouge/Theme/Style.html#method-c-new","(theme, hsh={})",""],["next_line_class","Rouge::Formatters::HTMLLinewise","Rouge/Formatters/HTMLLinewise.html#method-i-next_line_class","()",""],["normalize_syntax","Rouge::CLI::Help::Highlight::Style::List","Rouge/CLI/Help/Highlight/Style/List.html#method-c-normalize_syntax","(argv)",""],["operator_words","Rouge::Lexers::VisualBasic","Rouge/Lexers/VisualBasic.html#method-c-operator_words","()",""],["operators","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-operators","()",""],["option","Rouge::Lexer","Rouge/Lexer.html#method-i-option","(k, v=:absent)","<p>get or specify one option for this lexer\n"],["options","Rouge::Lexer","Rouge/Lexer.html#method-i-options","(o={})","<p>get and/or specify the options for this lexer.\n"],["own_entries","Rouge::InheritableList","Rouge/InheritableList.html#method-i-own_entries","()",""],["own_keys","Rouge::InheritableHash","Rouge/InheritableHash.html#method-i-own_keys","()",""],["palette","Rouge::Theme","Rouge/Theme.html#method-c-palette","(arg={})",""],["parent","Rouge::InheritableHash","Rouge/InheritableHash.html#method-i-parent","()",""],["parent","Rouge::InheritableList","Rouge/InheritableList.html#method-i-parent","()",""],["parent","Rouge::TemplateLexer","Rouge/TemplateLexer.html#method-i-parent","()","<p>the parent lexer - the one being templated.\n"],["parse","Rouge::CLI","Rouge/CLI.html#method-c-parse","(argv=ARGV)",""],["parse","Rouge::CLI::Help","Rouge/CLI/Help.html#method-c-parse","(argv)",""],["parse","Rouge::CLI::Help::Highlight","Rouge/CLI/Help/Highlight.html#method-c-parse","(argv)",""],["parse","Rouge::CLI::Help::Highlight::Style","Rouge/CLI/Help/Highlight/Style.html#method-c-parse","(argv)",""],["parse","Rouge::CLI::Help::Highlight::Style::List","Rouge/CLI/Help/Highlight/Style/List.html#method-c-parse","(argv)",""],["parse","Rouge::CLI::Version","Rouge/CLI/Version.html#method-c-parse","(*)",""],["parse_cgi","Rouge::CLI::Help::Highlight","Rouge/CLI/Help/Highlight.html#method-c-parse_cgi","(str)",""],["pop!","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-pop-21","(times=1)","<p>Pop the state stack.  If a number is passed in, it will be popped that\nnumber of times.\n"],["prepend","Rouge::RegexLexer","Rouge/RegexLexer.html#method-c-prepend","(name, &b)",""],["prepended","Rouge::RegexLexer::StateDSL","Rouge/RegexLexer/StateDSL.html#method-i-prepended","(&defn)",""],["primitives","Rouge::Lexers::OCaml","Rouge/Lexers/OCaml.html#method-c-primitives","()",""],["push","Rouge::InheritableList","Rouge/InheritableList.html#method-i-push","(o)",""],["push","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-push","(state_name=nil, &b)","<p>Push a state onto the stack.  If no state name is given and you&#39;ve\npassed a block, a state will be …\n"],["qualname","Rouge::Token","Rouge/Token.html#method-c-qualname","()",""],["read","Rouge::FileReader","Rouge/FileReader.html#method-i-read","()",""],["recurse","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-recurse","(text=nil)",""],["references","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-references","()",""],["regex","Rouge::Lexers::Sed","Rouge/Lexers/Sed.html#method-i-regex","()",""],["register","Rouge::Lexer","Rouge/Lexer.html#method-c-register","(name, lexer)","<p>@private\n"],["register!","Rouge::Token","Rouge/Token.html#method-c-register-21","()",""],["registry","Rouge::Lexer","Rouge/Lexer.html#method-c-registry","()",""],["registry","Rouge::Theme","Rouge/Theme.html#method-c-registry","()",""],["render","Rouge::CSSTheme","Rouge/CSSTheme.html#method-i-render","(&b)",""],["render","Rouge::Formatter","Rouge/Formatter.html#method-i-render","(tokens)","<p>@deprecated Use {#format} instead.\n"],["render","Rouge::Theme","Rouge/Theme.html#method-c-render","(opts={}, &b)",""],["render","Rouge::Theme::Style","Rouge/Theme/Style.html#method-i-render","(selector, &b)",""],["render_base","Rouge::CSSTheme","Rouge/CSSTheme.html#method-i-render_base","(selector, &b)",""],["rendered_rules","Rouge::Theme::Style","Rouge/Theme/Style.html#method-i-rendered_rules","(&b)",""],["replace_state","Rouge::RegexLexer","Rouge/RegexLexer.html#method-c-replace_state","(name, new_defn)",""],["replacement","Rouge::Lexers::Sed","Rouge/Lexers/Sed.html#method-i-replacement","()",""],["reserved","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-reserved","()",""],["reserved","Rouge::Lexers::C","Rouge/Lexers/C.html#method-c-reserved","()",""],["reserved","Rouge::Lexers::Cpp","Rouge/Lexers/Cpp.html#method-c-reserved","()",""],["reserved","Rouge::Lexers::Glsl","Rouge/Lexers/Glsl.html#method-c-reserved","()",""],["reserved","Rouge::Lexers::Javascript","Rouge/Lexers/Javascript.html#method-c-reserved","()",""],["reset!","Rouge::Indentation","Rouge/Indentation.html#method-i-reset-21","()",""],["reset!","Rouge::Lexer","Rouge/Lexer.html#method-i-reset-21","()","<p>@abstract\n<p>Called after each lex is finished.  The default implementation is a noop.\n"],["reset!","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-reset-21","()","<p>reset this lexer to its initial state.  This runs all of the start_procs.\n"],["reset_indent","Rouge::Lexers::YAML","Rouge/Lexers/YAML.html#method-i-reset_indent","()","<p>reset the indentation levels\n"],["reset_stack","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-reset_stack","()","<p>reset the stack back to `[:root]`.\n"],["reset_string","Rouge::Formatters::Terminal256::EscapeSequence","Rouge/Formatters/Terminal256/EscapeSequence.html#method-i-reset_string","()",""],["rouge_formatter","Rouge::Plugins::Redcarpet","Rouge/Plugins/Redcarpet.html#method-i-rouge_formatter","(lexer)","<p>override this method for custom formatting behavior\n"],["ruby","Rouge::Lexers::Haml","Rouge/Lexers/Haml.html#method-i-ruby","()",""],["ruby","Rouge::Lexers::Slim","Rouge/Lexers/Slim.html#method-i-ruby","()",""],["rule","Rouge::RegexLexer::StateDSL","Rouge/RegexLexer/StateDSL.html#method-i-rule","(re, tok=nil, next_state=nil, &callback)","<p>Define a new rule for this state.\n<p>@overload rule(re, token, next_state=nil) @overload rule(re, &amp;callback)\n…\n"],["run","Rouge::CLI::Help","Rouge/CLI/Help.html#method-i-run","()",""],["run","Rouge::CLI::Help::Highlight","Rouge/CLI/Help/Highlight.html#method-i-run","()",""],["run","Rouge::CLI::Help::Highlight::Style","Rouge/CLI/Help/Highlight/Style.html#method-i-run","()",""],["run","Rouge::CLI::Help::Highlight::Style::List","Rouge/CLI/Help/Highlight/Style/List.html#method-i-run","()",""],["run","Rouge::CLI::Version","Rouge/CLI/Version.html#method-i-run","()",""],["safe_span","Rouge::Formatters::HTMLInline","Rouge/Formatters/HTMLInline.html#method-i-safe_span","(tok, safe_val)",""],["save_indent","Rouge::Lexers::YAML","Rouge/Lexers/YAML.html#method-i-save_indent","(match)","<p>Save a possible indentation level\n"],["set_indent","Rouge::Lexers::YAML","Rouge/Lexers/YAML.html#method-i-set_indent","(match, opts={})",""],["shebang","Rouge::TextAnalyzer","Rouge/TextAnalyzer.html#method-i-shebang","()","<p>Find a shebang.  Returns nil if no shebang is present.\n"],["shebang?","Rouge::TextAnalyzer","Rouge/TextAnalyzer.html#method-i-shebang-3F","(match)","<p>Check if the given shebang is present.\n<p>This normalizes things so that `text.shebang?(&#39;bash&#39;)` …\n"],["single_css_selector","Rouge::CSSTheme","Rouge/CSSTheme.html#method-i-single_css_selector","(token)",""],["span","Rouge::Formatters::HTML","Rouge/Formatters/HTML.html#method-i-span","(tok, val)",""],["stack","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-stack","()","<p>The state stack.  This is initially the single state `[:root]`. It is an\nerror for this stack to be empty. …\n"],["start","Rouge::RegexLexer","Rouge/RegexLexer.html#method-c-start","(&b)","<p>Specify an action to be run every fresh lex.\n<p>@example\n\n<pre>start { puts &quot;I&#39;m lexing a new string!&quot; }</pre>\n"],["start_inline?","Rouge::Lexers::PHP","Rouge/Lexers/PHP.html#method-i-start_inline-3F","()",""],["start_procs","Rouge::RegexLexer","Rouge/RegexLexer.html#method-c-start_procs","()","<p>The routines to run at the beginning of a fresh lex. @see start\n"],["starts_block","Rouge::Indentation","Rouge/Indentation.html#method-i-starts_block","(block_state)","<p>push a state for the next indented block\n"],["state","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-state","()","<p>The current state - i.e. one on top of the state stack.\n<p>NB: if the state stack is empty, this will throw …\n"],["state","Rouge::RegexLexer","Rouge/RegexLexer.html#method-c-state","(name, &b)","<p>Define a new state for this lexer with the given name. The block will be\nevaluated in the context of …\n"],["state?","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-state-3F","(state_name)","<p>Check if `state_name` is the state on top of the state stack.\n"],["state_definitions","Rouge::RegexLexer","Rouge/RegexLexer.html#method-c-state_definitions","()",""],["states","Rouge::RegexLexer","Rouge/RegexLexer.html#method-c-states","()","<p>The states hash for this lexer. @see state\n"],["step","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-step","(state, stream)","<p>Runs one step of the lex.  Rules in the current state are tried until one\nmatches, at which point its …\n"],["step_regex","Rouge::Lexers::Gherkin","Rouge/Lexers/Gherkin.html#method-c-step_regex","()",""],["stream","Rouge::Formatter","Rouge/Formatter.html#method-i-stream","(tokens, &b)","<p>@abstract yield strings that, when concatenated, form the formatted output\n"],["stream","Rouge::Formatters::HTML","Rouge/Formatters/HTML.html#method-i-stream","(tokens, &b)","<p>@yield the html output.\n"],["stream","Rouge::Formatters::HTMLLinewise","Rouge/Formatters/HTMLLinewise.html#method-i-stream","(tokens, &b)",""],["stream","Rouge::Formatters::Null","Rouge/Formatters/Null.html#method-i-stream","(tokens, &b)",""],["stream","Rouge::Formatters::Terminal256","Rouge/Formatters/Terminal256.html#method-i-stream","(tokens, &b)",""],["stream_tableized","Rouge::Formatters::HTML","Rouge/Formatters/HTML.html#method-i-stream_tableized","(tokens)",""],["stream_tokens","Rouge::Lexer","Rouge/Lexer.html#method-i-stream_tokens","(stream, &b)","<p>@abstract\n<p>Yield `[token, chunk]` pairs, given a prepared input stream.  This must be\nimplemented.\n<p>@param …\n"],["stream_tokens","Rouge::Lexers::PlainText","Rouge/Lexers/PlainText.html#method-i-stream_tokens","(string, &b)",""],["stream_tokens","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-stream_tokens","(str, &b)","<p>This implements the lexer protocol, by yielding [token, value] pairs.\n<p>The process for lexing works as …\n"],["stream_untableized","Rouge::Formatters::HTML","Rouge/Formatters/HTML.html#method-i-stream_untableized","(tokens, &b)",""],["studio_classes","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-studio_classes","()",""],["studio_commands","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-studio_commands","()",""],["studio_events","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-studio_events","()",""],["studio_properties","Rouge::Lexers::AppleScript","Rouge/Lexers/AppleScript.html#method-c-studio_properties","()",""],["style","Rouge::Theme","Rouge/Theme.html#method-c-style","(*tokens)",""],["style_for","Rouge::CSSTheme","Rouge/CSSTheme.html#method-i-style_for","(tok)",""],["style_string","Rouge::Formatters::Terminal256::EscapeSequence","Rouge/Formatters/Terminal256/EscapeSequence.html#method-i-style_string","()",""],["styles","Rouge::Theme","Rouge/Theme.html#method-i-styles","()",""],["styles","Rouge::Theme","Rouge/Theme.html#method-c-styles","()",""],["sub_tokens","Rouge::Token","Rouge/Token.html#method-c-sub_tokens","()",""],["symbolic_reserved","Rouge::Lexers::SML","Rouge/Lexers/SML.html#method-c-symbolic_reserved","()",""],["tag","Rouge::Formatter","Rouge/Formatter.html#method-c-tag","(tag=nil)","<p>Specify or get the unique tag for this formatter.  This is used for\nspecifying a formatter in `rougify`. …\n"],["tag","Rouge::Lexer","Rouge/Lexer.html#method-i-tag","()","<p>delegated to {Lexer.tag}\n"],["tag","Rouge::Lexer","Rouge/Lexer.html#method-c-tag","(t=nil)","<p>Used to specify or get the canonical name of this lexer class.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">MyLexer</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Lexer</span>\n  <span class=\"ruby-identifier\">tag</span> <span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["text_style","Rouge::Formatters::Terminal256","Rouge/Formatters/Terminal256.html#method-i-text_style","()",""],["title","Rouge::Lexer","Rouge/Lexer.html#method-c-title","(t=nil)","<p>Specify or get this lexer&#39;s title. Meant to be human-readable.\n"],["to_state","Rouge::RegexLexer::StateDSL","Rouge/RegexLexer/StateDSL.html#method-i-to_state","(lexer_class)",""],["token","Rouge::Lexers::PlainText","Rouge/Lexers/PlainText.html#method-i-token","()",""],["token","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-token","(tok, val=@current_stream[0])","<p>Yield a token.\n<p>@param tok\n\n<pre>the token type</pre>\n"],["token","Rouge::Token","Rouge/Token.html#method-c-token","(name, shortname, &b)",""],["token","Rouge::Token::Tokens","Rouge/Token/Tokens.html#method-c-token","(name, shortname, &b)",""],["token_chain","Rouge::Token","Rouge/Token.html#method-c-token_chain","()",""],["token_for_final_id","Rouge::Lexers::SML","Rouge/Lexers/SML.html#method-i-token_for_final_id","(id)",""],["token_for_id","Rouge::Lexers::SML","Rouge/Lexers/SML.html#method-i-token_for_id","(id)",""],["token_for_id_with_dot","Rouge::Lexers::SML","Rouge/Lexers/SML.html#method-i-token_for_id_with_dot","(id)",""],["types","Rouge::Lexers::Groovy","Rouge/Lexers/Groovy.html#method-c-types","()",""],["underscorize","Rouge::Lexers::Nim","Rouge/Lexers/Nim.html#method-c-underscorize","(words)",""],["vendor_prefixes","Rouge::Lexers::CSS","Rouge/Lexers/CSS.html#method-c-vendor_prefixes","()","<p>source: www.w3.org/TR/CSS21/syndata.html#vendor-keyword-history\n"],["version","Rouge","Rouge.html#method-c-version","()",""],["word_operators","Rouge::Lexers::OCaml","Rouge/Lexers/OCaml.html#method-c-word_operators","()",""],["xterm_colors","Rouge::Formatters::Terminal256::EscapeSequence","Rouge/Formatters/Terminal256/EscapeSequence.html#method-c-xterm_colors","()",""],["yield_token","Rouge::RegexLexer","Rouge/RegexLexer.html#method-i-yield_token","(tok, val)",""],["apache","","lib/rouge/demos/apache.html","","<p>AddDefaultCharset UTF-8\n<p>RewriteEngine On\n<p># Serve gzipped version if available and accepted AddEncoding …\n"],["applescript","","lib/rouge/demos/applescript.html","","<p>– AppleScript playing with iTunes tell application “iTunes” to get current\nselection\n"],["c","","lib/rouge/demos/c.html","","<p>#include “ruby/ruby.h”\n<p>static int clone_method_i(st_data_t key, st_data_t value, st_data_t data) …\n"],["clojure","","lib/rouge/demos/clojure.html","","<p>(defn make-adder [x]\n\n<pre>(let [y x]\n  (fn [z] (+ y z))))</pre>\n<p>(def add2 (make-adder 2)) (add2 4)\n"],["coffeescript","","lib/rouge/demos/coffeescript.html","","<p># Objects: math =\n\n<pre>root:   Math.sqrt\nsquare: square\ncube:   (x) -&gt; x * square x</pre>\n"],["common_lisp","","lib/rouge/demos/common_lisp.html","","<p>(defun square (x) (* x x))\n"],["conf","","lib/rouge/demos/conf.html","","<p># A generic configuration file option1 “val1” option2 23 option3\n&#39;val3&#39;\n"],["cpp","","lib/rouge/demos/cpp.html","","<p>#include&lt;iostream&gt;\n<p>using namespace std;\n<p>int main() {\n"],["csharp","","lib/rouge/demos/csharp.html","","<p>// reverse byte order (16-bit) public static UInt16 ReverseBytes(UInt16\nvalue) {\n\n<pre>return (UInt16)((value ...</pre>\n"],["css","","lib/rouge/demos/css.html","","<p>body {\n\n<pre>font-size: 12pt;\nbackground: #fff url(temp.png) top left no-repeat;</pre>\n<p>}\n"],["dart","","lib/rouge/demos/dart.html","","<p>void main() {\n\n<pre>var collection=[1,2,3,4,5];\nfor(var a in collection){\n  print(a);\n}</pre>\n<p>}\n"],["diff","","lib/rouge/demos/diff.html","","<p>— file1       2012-10-16 15:07:58.086886874 +0100 +++ file2      \n2012-10-16 15:08:07.642887236 +0100 …\n"],["elixir","","lib/rouge/demos/elixir.html","","<p>Enum.map(, fn(x) -&gt; x * 2 end)\n"],["erb","","lib/rouge/demos/erb.html","","<p>&lt;title&gt;&lt;%= @title %&gt;&lt;/title&gt;\n"],["erlang","","lib/rouge/demos/erlang.html","","<p>%%% Geometry module. -module(geometry). -export().\n<p>%% Compute rectangle and circle area. area({rectangle, …\n"],["factor","","lib/rouge/demos/factor.html","","<p>USING: io kernel sequences ;\n<p>4 iota [\n\n<pre>&quot;Happy Birthday &quot; write 2 = &quot;dear NAME&quot; &quot;to You&quot; ? print</pre>\n"],["gherkin","","lib/rouge/demos/gherkin.html","","<p># language: en Feature: Addition\n\n<pre>In order to avoid silly mistakes\nAs a math idiot\nI want to be told the ...</pre>\n"],["glsl","","lib/rouge/demos/glsl.html","","<p>#version 330 core\n<p>uniform mat4 worldMatrix;\n<p>layout(location = 0) in vec2 position; layout(location = 1) …\n"],["go","","lib/rouge/demos/go.html","","<p>package main\n<p>import “fmt”\n<p>func main() {\n"],["groovy","","lib/rouge/demos/groovy.html","","<p>class Greet {\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">name</span>\n<span class=\"ruby-constant\">Greet</span>(<span class=\"ruby-identifier\">who</span>) { <span class=\"ruby-identifier\">name</span> = <span class=\"ruby-identifier\">who</span>[<span class=\"ruby-value\">0</span>].<span class=\"ruby-identifier\">toUpperCase</span>() <span class=\"ruby-operator\">+</span>\n                    <span class=\"ruby-identifier\">who</span>[<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">-1</span>] }\n<span class=\"ruby-keyword\">def</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["haml","","lib/rouge/demos/haml.html","","<p>%section.container\n\n<pre>%h1= post.title\n%h2= post.subtitle\n.content\n  = post.content</pre>\n"],["handlebars","","lib/rouge/demos/handlebars.html","","<p>&lt;div class=“entry”&gt;\n\n<pre>&lt;h1&gt;{{title}}&lt;/h1&gt;\n{{#with story}}\n  &lt;div class=&quot;intro&quot;&gt;{{{intro}}}&lt;/div&gt; ...</pre>\n"],["haskell","","lib/rouge/demos/haskell.html","","<p>quicksort  &mdash; Ord a =&gt; [a] -&gt; [a]\n\n<p>quicksort []     = [] quicksort (p:xs) = (quicksort lesser) ++ [p] …\n"],["html","","lib/rouge/demos/html.html","","<p>&lt;html&gt;\n\n<pre>&lt;head&gt;&lt;title&gt;Title!&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n  &lt;p id=&quot;foo&quot;&gt;Hello, World!&lt;/p&gt;\n  &lt;script type=&quot;text/javascript&quot;&gt;var ...</pre>\n"],["http","","lib/rouge/demos/http.html","","<p>POST /demo/submit/ HTTP/1.1 Host: rouge.jneen.net Cache-Control: max-age=0\nOrigin: rouge.jayferd.us User-Agent: …\n"],["ini","","lib/rouge/demos/ini.html","","<p>; last modified 1 April 2001 by John Doe\n<p>owner &mdash; name=John Doe organization=Acme Widgets Inc.\n\n"],["io","","lib/rouge/demos/io.html","","<p>bottle := method(i,\n\n<pre>if(i==0, return &quot;no more bottles of beer&quot;)\nif(i==1, return &quot;1 bottle of beer&quot;)\nreturn ...</pre>\n"],["java","","lib/rouge/demos/java.html","","<p>public class java {\n\n<pre>public static void main(String[] args) {\n    System.out.println(&quot;Hello World&quot;);\n}</pre>\n"],["javascript","","lib/rouge/demos/javascript.html","","<p>$(document).ready(function() { alert(&#39;ready!&#39;); });\n"],["json","","lib/rouge/demos/json.html","","<p>{ “one”: 1, “two”: 2, “null”: null, “simple”: true }\n"],["json-doc","","lib/rouge/demos/json-doc.html","","<p>{ “one”: 1, “two”: 2, “null”: null, “simple”: true } // a simple …\n"],["liquid","","lib/rouge/demos/liquid.html","","<p>&lt;ul id=“products”&gt;\n\n<pre>{% for product in products %}\n  &lt;li&gt;\n    &lt;h2&gt;{{ product.title }}&lt;/h2&gt; ...</pre>\n"],["literate_coffeescript","","lib/rouge/demos/literate_coffeescript.html","","<p>Import the helpers we plan to use.\n\n<pre class=\"ruby\">{<span class=\"ruby-identifier\">extend</span>, <span class=\"ruby-identifier\">last</span>} = <span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;./helpers&#39;</span>\n</pre>\n"],["literate_haskell","","lib/rouge/demos/literate_haskell.html","","<p>In Bird-style you have to leave a blank before the code.\n<p>&gt; fact  &mdash; Integer -&gt; Integer\n\n<p>&gt; fact 0 = …\n"],["llvm","","lib/rouge/demos/llvm.html","","<p>; copied from llvm.org/docs/LangRef.html#module-structure ; Declare the\nstring constant as a global constant. …\n"],["lua","","lib/rouge/demos/lua.html","","<p>– defines a factorial function function fact (n)\n\n<pre>if n == 0 then\n  return 1\nelse\n  return n * fact(n-1) ...</pre>\n"],["make","","lib/rouge/demos/make.html","","<p>.PHONY: all all: $(OBJ)\n<p>$(OBJ): $(SOURCE)\n\n<pre>@echo &quot;compiling...&quot;\n$(GCC) $(CFLAGS) $&lt; &gt; $@</pre>\n"],["markdown","","lib/rouge/demos/markdown.html","","<p>Markdown has cool [reference links][ref 1] and [regular links\ntoo](example.com)\n<p>[ref 1]: example.com\n"],["matlab","","lib/rouge/demos/matlab.html","","<p>A = cat( 3, [1 2 3; 9 8 7; 4 6 5], [0 3 2; 8 8 4; 5 3 5], …\n\n<pre>[6 4 7; 6 8 5; 5 4 3]);</pre>\n<p>% The EIG function …\n"],["moonscript","","lib/rouge/demos/moonscript.html","","<p>util = require “my.module”\n<p>a_table = {\n\n<pre>foo: &#39;bar&#39;\ninterpolated: &quot;foo-#{other.stuff 2 + 3}&quot;\n&quot;string&quot;: ...</pre>\n"],["nginx","","lib/rouge/demos/nginx.html","","<p>server {\n\n<pre>listen          80;\nserver_name     example.com *.example.com;\nrewrite ^       http://www.domain.com$request_uri? ...</pre>\n"],["nim","","lib/rouge/demos/nim.html","","<p>import math,strutils\n<p>proc fixedWidth(input: string, minFieldSize: int):string {.inline.} =\n\n<pre># Note that ...</pre>\n"],["objective_c","","lib/rouge/demos/objective_c.html","","<p>@interface Person : NSObject {\n\n<pre>@public\nNSString *name;\n@private\nint age;</pre>\n<p>}\n"],["ocaml","","lib/rouge/demos/ocaml.html","","<p>(* Binary tree with leaves car­rying an integer. *) type tree = Leaf of int\n| Node of tree * tree\n<p>let …\n"],["perl","","lib/rouge/demos/perl.html","","<p>#!/usr/bin/env perl use warnings; print “a: ”; my $a = “foo”; print $a;\n"],["php","","lib/rouge/demos/php.html","","<p>&lt;?php\n\n<pre>print(&quot;Hello {$world}&quot;);</pre>\n<p>?&gt;\n"],["plaintext","","lib/rouge/demos/plaintext.html","","<p>plain text :)\n"],["powershell","","lib/rouge/demos/powershell.html","","<p>Function Get-IPv4Scopes &lt;#\n\n<pre>.SYNOPSIS\n        Read IPv4Scopes from an array of servers\n.PARAMETER Servers ...</pre>\n"],["praat","","lib/rouge/demos/praat.html","","<p>form Copy selected files…\n\n<pre>word Prefix\nword Suffix _copy\nboolean Keep_original 1</pre>\n<p>endform\n"],["prolog","","lib/rouge/demos/prolog.html","","<p>diff(plus(A,B), X, plus(DA, DB))\n\n<pre>&lt;= diff(A, X, DA) and diff(B, X, DB).</pre>\n<p>diff(times(A,B), X, plus(times(A, …\n"],["properties","","lib/rouge/demos/properties.html","","<p># You are reading the “.properties” entry. ! The exclamation mark can also\nmark text as comments. …\n"],["puppet","","lib/rouge/demos/puppet.html","","<p>service { &#39;ntp&#39;:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">name</span>      =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">$service_name</span>,\n<span class=\"ruby-keyword\">ensure</span>    =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">running</span>,\n<span class=\"ruby-identifier\">enable</span>    =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>,\n<span class=\"ruby-identifier\">subscribe</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["python","","lib/rouge/demos/python.html","","<p>def fib(n):    # write Fibonacci series up to n\n\n<pre>&quot;&quot;&quot;Print a Fibonacci series up to n.&quot;&quot;&quot;\na, b = 0, 1\nwhile ...</pre>\n"],["qml","","lib/rouge/demos/qml.html","","<p>import QtQuick 2.0 Item {\n\n<pre>width: 200\nheight: 100\nMouseArea {\n    anchors.fill: parent\n    onClicked: Qt.quit() ...</pre>\n"],["r","","lib/rouge/demos/r.html","","<p>dbenford &lt;- function(x){\n\n<pre>log10(1 + 1/x)</pre>\n<p>}\n"],["racket","","lib/rouge/demos/racket.html","","<p>#lang racket\n<p>;; draw a graph of cos and deriv^3(cos) (require plot) (define ((deriv f)\nx)\n\n<pre>(/ (- (f x) (f ...</pre>\n"],["ruby","","lib/rouge/demos/ruby.html","","<p>class Greeter\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">initialize</span>(<span class=\"ruby-identifier\">name</span>=<span class=\"ruby-string\">&quot;World&quot;</span>)\n  <span class=\"ruby-ivar\">@name</span> = <span class=\"ruby-identifier\">name</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">say_hi</span>\n  <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">&quot;Hi #{@name}!&quot;</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>end …\n"],["rust","","lib/rouge/demos/rust.html","","<p>use core::*;\n<p>fn main() {\n\n<pre>for [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Carol&quot;].each |&amp;name| {\n    do task::spawn {\n        let ...</pre>\n"],["sass","","lib/rouge/demos/sass.html","","<p>@for $i from 1 through 3\n\n<pre>.item-#{$i}\n  width: 2em * $i</pre>\n"],["scala","","lib/rouge/demos/scala.html","","<p>class Greeter(name: String = “World”) {\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">sayHi</span>() { <span class=\"ruby-identifier\">println</span>(<span class=\"ruby-string\">&quot;Hi &quot;</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-string\">&quot;!&quot;</span>) }\n</pre>\n<p>}\n"],["scheme","","lib/rouge/demos/scheme.html","","<p>(define Y\n\n<pre>(lambda (m)\n  ((lambda (f) (m (lambda (a) ((f f) a))))\n   (lambda (f) (m (lambda (a) ((f f) ...</pre>\n"],["scss","","lib/rouge/demos/scss.html","","<p>@for $i from 1 through 3 {\n\n<pre>.item-#{$i} {\n  width: 2em * $i;\n}</pre>\n<p>}\n"],["sed","","lib/rouge/demos/sed.html","","<p>/begin/,/end/ {\n\n<pre>/begin/n # skip over the line that has &quot;begin&quot; on it\ns/old/new/</pre>\n<p>}\n"],["shell","","lib/rouge/demos/shell.html","","<p># If not running interactively, don&#39;t do anything\n<p>[ -z “$PS1” ] &mdash; &amp;&amp; return\n\n"],["slim","","lib/rouge/demos/slim.html","","<p>doctype html html\n\n<pre>body\n  h1 Markup examples   \n  #content\n    p \n    | Slim can have #{ruby_code} interpolated! ...</pre>\n"],["smalltalk","","lib/rouge/demos/smalltalk.html","","<p>quadMultiply: i1 and: i2\n\n<pre>&quot;This method multiplies the given numbers by each other\nand the result by 4.&quot; ...</pre>\n"],["sml","","lib/rouge/demos/sml.html","","<p>datatype shape\n\n<pre>= Circle   of loc * real      (* center and radius *)\n| Square   of loc * real      (* ...</pre>\n"],["sql","","lib/rouge/demos/sql.html","","<p>SELECT * FROM `users` WHERE `user`.`id` = 1\n"],["swift","","lib/rouge/demos/swift.html","","<p>// Say hello to poeple func sayHello(personName: String) -&gt; String {\n\n<pre>let greeting = &quot;Hello, &quot; + personName ...</pre>\n"],["tcl","","lib/rouge/demos/tcl.html","","<p>proc cross_sum {s} {expr [join [split $s “”] +]}\n"],["tex","","lib/rouge/demos/tex.html","","<p>To write LaTeX\\ you would type verb:LaTeX:.\n"],["toml","","lib/rouge/demos/toml.html","","<p># This is a TOML document. Boom.\n<p>title = “TOML Example”\n<p>owner &mdash; name = “Tom Preston-Werner” …\n"],["tulip","","lib/rouge/demos/tulip.html","","<p># ref.tlp @module ref\n<p>ref value = Instance (spawn [! loop value ])\n<p>loop value = receive [\n"],["vb","","lib/rouge/demos/vb.html","","<p>Private Sub Form_Load()\n\n<pre>&#39; Execute a simple message box that says &quot;Hello, World!&quot;\nMsgBox &quot;Hello, World!&quot;</pre>\n"],["viml","","lib/rouge/demos/viml.html","","<p>filetype off call pathogen#runtime_append_all_bundles() filetype plugin\nindent on\n"],["xml","","lib/rouge/demos/xml.html","","<p>&lt;xsl:template match=“/”&gt;&lt;/xsl:template&gt;\n"],["yaml","","lib/rouge/demos/yaml.html","","<p>one: Mark McGwire two: Sammy Sosa three: Ken Griffey\n"]]}}